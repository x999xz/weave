// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class misc implements flatbuffers.IUnpackableObject<miscT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):misc {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsmisc(bb:flatbuffers.ByteBuffer, obj?:misc):misc {
  return (obj || new misc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsmisc(bb:flatbuffers.ByteBuffer, obj?:misc):misc {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new misc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

autopeek():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_autopeek(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

duckAssist():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_duck_assist(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

slowwalk():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_slowwalk(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

bunnyhop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_bunnyhop(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

autoStrafe():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_auto_strafe(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscOnshotCapsule():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_onshot_capsule(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscDarkMode():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_dark_mode(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

disableLight():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_disable_light(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

penetrationCrosshair():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_penetration_crosshair(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

forceCrosshair():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_force_crosshair(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

blur():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_blur(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

worldChanger():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_world_changer(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

grenadeTrailColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_grenade_trail_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

thirdperson():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_thirdperson(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

thirdpersonAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_thirdperson_amount(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

smokeRemove():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_smoke_remove(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

serverImpact():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_server_impact(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

clientImpact():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_client_impact(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

bulletTrace():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_bullet_trace(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 40);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

bulletTraceColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_bullet_trace_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 42);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

bulletTraceEnemy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_bullet_trace_enemy(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 44);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

bulletTraceEnemyColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_bullet_trace_enemy_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 46);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

grenadeTrail():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_grenade_trail(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 48);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

keybind():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 50);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_keybind(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 50);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

keybindPosition(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

keybindPositionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

keybindPositionArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 52);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

spectators():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 54);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_spectators(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 54);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

spectatorsPosition(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

spectatorsPositionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

spectatorsPositionArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 56);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

rapidPosition(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

rapidPositionLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rapidPositionArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 58);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

watermark():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_watermark(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 60);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscViewmodelChanger():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 62);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_viewmodel_changer(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 62);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscViewmodelX():number {
  const offset = this.bb!.__offset(this.bb_pos, 64);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_viewmodel_x(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 64);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscViewmodelY():number {
  const offset = this.bb!.__offset(this.bb_pos, 66);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_viewmodel_y(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 66);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscViewmodelZ():number {
  const offset = this.bb!.__offset(this.bb_pos, 68);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_viewmodel_z(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 68);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscFov():number {
  const offset = this.bb!.__offset(this.bb_pos, 70);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_fov(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 70);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscRemoveScope():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_remove_scope(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 72);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscNorecoil():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_norecoil(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 74);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscRemovePostProcessing():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_remove_post_processing(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 76);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscRemoveLegs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_remove_legs(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 78);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscRemoveGrenadeCrosshair():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 80);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_remove_grenade_crosshair(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 80);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscUnlockInventory():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 82);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_unlock_inventory(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 82);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscRemoveBob():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 84);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_remove_bob(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 84);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscBuybot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 86);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_buybot(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 86);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscBuybotPrimary():number {
  const offset = this.bb!.__offset(this.bb_pos, 88);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_buybot_primary(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 88);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscBuybotSecondary():number {
  const offset = this.bb!.__offset(this.bb_pos, 90);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_misc_buybot_secondary(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 90);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

miscBuybotZeus():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_buybot_zeus(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 92);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscBuybotArmor():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_buybot_armor(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 94);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscBuybotGrenades():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 96);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_buybot_grenades(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 96);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscGrenadePrediction():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_grenade_prediction(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 98);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscPreserveKillfeed():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_preserve_killfeed(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 100);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscEspOof():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_esp_oof(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 102);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscEspOofColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 104);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_misc_esp_oof_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 104);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

miscHitsound():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_hitsound(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 106);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

miscHitmarker():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_misc_hitmarker(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 108);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static startmisc(builder:flatbuffers.Builder) {
  builder.startObject(53);
}

static addAutopeek(builder:flatbuffers.Builder, autopeek:boolean) {
  builder.addFieldInt8(0, +autopeek, +false);
}

static addDuckAssist(builder:flatbuffers.Builder, duckAssist:boolean) {
  builder.addFieldInt8(1, +duckAssist, +false);
}

static addSlowwalk(builder:flatbuffers.Builder, slowwalk:boolean) {
  builder.addFieldInt8(2, +slowwalk, +false);
}

static addBunnyhop(builder:flatbuffers.Builder, bunnyhop:boolean) {
  builder.addFieldInt8(3, +bunnyhop, +false);
}

static addAutoStrafe(builder:flatbuffers.Builder, autoStrafe:boolean) {
  builder.addFieldInt8(4, +autoStrafe, +false);
}

static addMiscOnshotCapsule(builder:flatbuffers.Builder, miscOnshotCapsule:boolean) {
  builder.addFieldInt8(5, +miscOnshotCapsule, +false);
}

static addMiscDarkMode(builder:flatbuffers.Builder, miscDarkMode:boolean) {
  builder.addFieldInt8(6, +miscDarkMode, +false);
}

static addDisableLight(builder:flatbuffers.Builder, disableLight:boolean) {
  builder.addFieldInt8(7, +disableLight, +false);
}

static addPenetrationCrosshair(builder:flatbuffers.Builder, penetrationCrosshair:boolean) {
  builder.addFieldInt8(8, +penetrationCrosshair, +false);
}

static addForceCrosshair(builder:flatbuffers.Builder, forceCrosshair:boolean) {
  builder.addFieldInt8(9, +forceCrosshair, +false);
}

static addBlur(builder:flatbuffers.Builder, blur:boolean) {
  builder.addFieldInt8(10, +blur, +false);
}

static addWorldChanger(builder:flatbuffers.Builder, worldChanger:number) {
  builder.addFieldInt32(11, worldChanger, 0);
}

static addGrenadeTrailColor(builder:flatbuffers.Builder, grenadeTrailColor:number) {
  builder.addFieldInt32(12, grenadeTrailColor, 0);
}

static addThirdperson(builder:flatbuffers.Builder, thirdperson:boolean) {
  builder.addFieldInt8(13, +thirdperson, +false);
}

static addThirdpersonAmount(builder:flatbuffers.Builder, thirdpersonAmount:number) {
  builder.addFieldInt32(14, thirdpersonAmount, 0);
}

static addSmokeRemove(builder:flatbuffers.Builder, smokeRemove:boolean) {
  builder.addFieldInt8(15, +smokeRemove, +false);
}

static addServerImpact(builder:flatbuffers.Builder, serverImpact:boolean) {
  builder.addFieldInt8(16, +serverImpact, +false);
}

static addClientImpact(builder:flatbuffers.Builder, clientImpact:boolean) {
  builder.addFieldInt8(17, +clientImpact, +false);
}

static addBulletTrace(builder:flatbuffers.Builder, bulletTrace:boolean) {
  builder.addFieldInt8(18, +bulletTrace, +false);
}

static addBulletTraceColor(builder:flatbuffers.Builder, bulletTraceColor:number) {
  builder.addFieldInt32(19, bulletTraceColor, 0);
}

static addBulletTraceEnemy(builder:flatbuffers.Builder, bulletTraceEnemy:boolean) {
  builder.addFieldInt8(20, +bulletTraceEnemy, +false);
}

static addBulletTraceEnemyColor(builder:flatbuffers.Builder, bulletTraceEnemyColor:number) {
  builder.addFieldInt32(21, bulletTraceEnemyColor, 0);
}

static addGrenadeTrail(builder:flatbuffers.Builder, grenadeTrail:boolean) {
  builder.addFieldInt8(22, +grenadeTrail, +false);
}

static addKeybind(builder:flatbuffers.Builder, keybind:boolean) {
  builder.addFieldInt8(23, +keybind, +false);
}

static addKeybindPosition(builder:flatbuffers.Builder, keybindPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(24, keybindPositionOffset, 0);
}

static createKeybindPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createKeybindPositionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createKeybindPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startKeybindPositionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSpectators(builder:flatbuffers.Builder, spectators:boolean) {
  builder.addFieldInt8(25, +spectators, +false);
}

static addSpectatorsPosition(builder:flatbuffers.Builder, spectatorsPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(26, spectatorsPositionOffset, 0);
}

static createSpectatorsPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSpectatorsPositionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSpectatorsPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startSpectatorsPositionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRapidPosition(builder:flatbuffers.Builder, rapidPositionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(27, rapidPositionOffset, 0);
}

static createRapidPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRapidPositionVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRapidPositionVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startRapidPositionVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWatermark(builder:flatbuffers.Builder, watermark:boolean) {
  builder.addFieldInt8(28, +watermark, +false);
}

static addMiscViewmodelChanger(builder:flatbuffers.Builder, miscViewmodelChanger:boolean) {
  builder.addFieldInt8(29, +miscViewmodelChanger, +false);
}

static addMiscViewmodelX(builder:flatbuffers.Builder, miscViewmodelX:number) {
  builder.addFieldInt32(30, miscViewmodelX, 0);
}

static addMiscViewmodelY(builder:flatbuffers.Builder, miscViewmodelY:number) {
  builder.addFieldInt32(31, miscViewmodelY, 0);
}

static addMiscViewmodelZ(builder:flatbuffers.Builder, miscViewmodelZ:number) {
  builder.addFieldInt32(32, miscViewmodelZ, 0);
}

static addMiscFov(builder:flatbuffers.Builder, miscFov:number) {
  builder.addFieldInt32(33, miscFov, 0);
}

static addMiscRemoveScope(builder:flatbuffers.Builder, miscRemoveScope:boolean) {
  builder.addFieldInt8(34, +miscRemoveScope, +false);
}

static addMiscNorecoil(builder:flatbuffers.Builder, miscNorecoil:boolean) {
  builder.addFieldInt8(35, +miscNorecoil, +false);
}

static addMiscRemovePostProcessing(builder:flatbuffers.Builder, miscRemovePostProcessing:boolean) {
  builder.addFieldInt8(36, +miscRemovePostProcessing, +false);
}

static addMiscRemoveLegs(builder:flatbuffers.Builder, miscRemoveLegs:boolean) {
  builder.addFieldInt8(37, +miscRemoveLegs, +false);
}

static addMiscRemoveGrenadeCrosshair(builder:flatbuffers.Builder, miscRemoveGrenadeCrosshair:boolean) {
  builder.addFieldInt8(38, +miscRemoveGrenadeCrosshair, +false);
}

static addMiscUnlockInventory(builder:flatbuffers.Builder, miscUnlockInventory:boolean) {
  builder.addFieldInt8(39, +miscUnlockInventory, +false);
}

static addMiscRemoveBob(builder:flatbuffers.Builder, miscRemoveBob:boolean) {
  builder.addFieldInt8(40, +miscRemoveBob, +false);
}

static addMiscBuybot(builder:flatbuffers.Builder, miscBuybot:boolean) {
  builder.addFieldInt8(41, +miscBuybot, +false);
}

static addMiscBuybotPrimary(builder:flatbuffers.Builder, miscBuybotPrimary:number) {
  builder.addFieldInt32(42, miscBuybotPrimary, 0);
}

static addMiscBuybotSecondary(builder:flatbuffers.Builder, miscBuybotSecondary:number) {
  builder.addFieldInt32(43, miscBuybotSecondary, 0);
}

static addMiscBuybotZeus(builder:flatbuffers.Builder, miscBuybotZeus:boolean) {
  builder.addFieldInt8(44, +miscBuybotZeus, +false);
}

static addMiscBuybotArmor(builder:flatbuffers.Builder, miscBuybotArmor:boolean) {
  builder.addFieldInt8(45, +miscBuybotArmor, +false);
}

static addMiscBuybotGrenades(builder:flatbuffers.Builder, miscBuybotGrenades:boolean) {
  builder.addFieldInt8(46, +miscBuybotGrenades, +false);
}

static addMiscGrenadePrediction(builder:flatbuffers.Builder, miscGrenadePrediction:boolean) {
  builder.addFieldInt8(47, +miscGrenadePrediction, +false);
}

static addMiscPreserveKillfeed(builder:flatbuffers.Builder, miscPreserveKillfeed:boolean) {
  builder.addFieldInt8(48, +miscPreserveKillfeed, +false);
}

static addMiscEspOof(builder:flatbuffers.Builder, miscEspOof:boolean) {
  builder.addFieldInt8(49, +miscEspOof, +false);
}

static addMiscEspOofColor(builder:flatbuffers.Builder, miscEspOofColor:number) {
  builder.addFieldInt32(50, miscEspOofColor, 0);
}

static addMiscHitsound(builder:flatbuffers.Builder, miscHitsound:boolean) {
  builder.addFieldInt8(51, +miscHitsound, +false);
}

static addMiscHitmarker(builder:flatbuffers.Builder, miscHitmarker:boolean) {
  builder.addFieldInt8(52, +miscHitmarker, +false);
}

static endmisc(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createmisc(builder:flatbuffers.Builder, autopeek:boolean, duckAssist:boolean, slowwalk:boolean, bunnyhop:boolean, autoStrafe:boolean, miscOnshotCapsule:boolean, miscDarkMode:boolean, disableLight:boolean, penetrationCrosshair:boolean, forceCrosshair:boolean, blur:boolean, worldChanger:number, grenadeTrailColor:number, thirdperson:boolean, thirdpersonAmount:number, smokeRemove:boolean, serverImpact:boolean, clientImpact:boolean, bulletTrace:boolean, bulletTraceColor:number, bulletTraceEnemy:boolean, bulletTraceEnemyColor:number, grenadeTrail:boolean, keybind:boolean, keybindPositionOffset:flatbuffers.Offset, spectators:boolean, spectatorsPositionOffset:flatbuffers.Offset, rapidPositionOffset:flatbuffers.Offset, watermark:boolean, miscViewmodelChanger:boolean, miscViewmodelX:number, miscViewmodelY:number, miscViewmodelZ:number, miscFov:number, miscRemoveScope:boolean, miscNorecoil:boolean, miscRemovePostProcessing:boolean, miscRemoveLegs:boolean, miscRemoveGrenadeCrosshair:boolean, miscUnlockInventory:boolean, miscRemoveBob:boolean, miscBuybot:boolean, miscBuybotPrimary:number, miscBuybotSecondary:number, miscBuybotZeus:boolean, miscBuybotArmor:boolean, miscBuybotGrenades:boolean, miscGrenadePrediction:boolean, miscPreserveKillfeed:boolean, miscEspOof:boolean, miscEspOofColor:number, miscHitsound:boolean, miscHitmarker:boolean):flatbuffers.Offset {
  misc.startmisc(builder);
  misc.addAutopeek(builder, autopeek);
  misc.addDuckAssist(builder, duckAssist);
  misc.addSlowwalk(builder, slowwalk);
  misc.addBunnyhop(builder, bunnyhop);
  misc.addAutoStrafe(builder, autoStrafe);
  misc.addMiscOnshotCapsule(builder, miscOnshotCapsule);
  misc.addMiscDarkMode(builder, miscDarkMode);
  misc.addDisableLight(builder, disableLight);
  misc.addPenetrationCrosshair(builder, penetrationCrosshair);
  misc.addForceCrosshair(builder, forceCrosshair);
  misc.addBlur(builder, blur);
  misc.addWorldChanger(builder, worldChanger);
  misc.addGrenadeTrailColor(builder, grenadeTrailColor);
  misc.addThirdperson(builder, thirdperson);
  misc.addThirdpersonAmount(builder, thirdpersonAmount);
  misc.addSmokeRemove(builder, smokeRemove);
  misc.addServerImpact(builder, serverImpact);
  misc.addClientImpact(builder, clientImpact);
  misc.addBulletTrace(builder, bulletTrace);
  misc.addBulletTraceColor(builder, bulletTraceColor);
  misc.addBulletTraceEnemy(builder, bulletTraceEnemy);
  misc.addBulletTraceEnemyColor(builder, bulletTraceEnemyColor);
  misc.addGrenadeTrail(builder, grenadeTrail);
  misc.addKeybind(builder, keybind);
  misc.addKeybindPosition(builder, keybindPositionOffset);
  misc.addSpectators(builder, spectators);
  misc.addSpectatorsPosition(builder, spectatorsPositionOffset);
  misc.addRapidPosition(builder, rapidPositionOffset);
  misc.addWatermark(builder, watermark);
  misc.addMiscViewmodelChanger(builder, miscViewmodelChanger);
  misc.addMiscViewmodelX(builder, miscViewmodelX);
  misc.addMiscViewmodelY(builder, miscViewmodelY);
  misc.addMiscViewmodelZ(builder, miscViewmodelZ);
  misc.addMiscFov(builder, miscFov);
  misc.addMiscRemoveScope(builder, miscRemoveScope);
  misc.addMiscNorecoil(builder, miscNorecoil);
  misc.addMiscRemovePostProcessing(builder, miscRemovePostProcessing);
  misc.addMiscRemoveLegs(builder, miscRemoveLegs);
  misc.addMiscRemoveGrenadeCrosshair(builder, miscRemoveGrenadeCrosshair);
  misc.addMiscUnlockInventory(builder, miscUnlockInventory);
  misc.addMiscRemoveBob(builder, miscRemoveBob);
  misc.addMiscBuybot(builder, miscBuybot);
  misc.addMiscBuybotPrimary(builder, miscBuybotPrimary);
  misc.addMiscBuybotSecondary(builder, miscBuybotSecondary);
  misc.addMiscBuybotZeus(builder, miscBuybotZeus);
  misc.addMiscBuybotArmor(builder, miscBuybotArmor);
  misc.addMiscBuybotGrenades(builder, miscBuybotGrenades);
  misc.addMiscGrenadePrediction(builder, miscGrenadePrediction);
  misc.addMiscPreserveKillfeed(builder, miscPreserveKillfeed);
  misc.addMiscEspOof(builder, miscEspOof);
  misc.addMiscEspOofColor(builder, miscEspOofColor);
  misc.addMiscHitsound(builder, miscHitsound);
  misc.addMiscHitmarker(builder, miscHitmarker);
  return misc.endmisc(builder);
}

unpack(): miscT {
  return new miscT(
    this.autopeek(),
    this.duckAssist(),
    this.slowwalk(),
    this.bunnyhop(),
    this.autoStrafe(),
    this.miscOnshotCapsule(),
    this.miscDarkMode(),
    this.disableLight(),
    this.penetrationCrosshair(),
    this.forceCrosshair(),
    this.blur(),
    this.worldChanger(),
    this.grenadeTrailColor(),
    this.thirdperson(),
    this.thirdpersonAmount(),
    this.smokeRemove(),
    this.serverImpact(),
    this.clientImpact(),
    this.bulletTrace(),
    this.bulletTraceColor(),
    this.bulletTraceEnemy(),
    this.bulletTraceEnemyColor(),
    this.grenadeTrail(),
    this.keybind(),
    this.bb!.createScalarList<number>(this.keybindPosition.bind(this), this.keybindPositionLength()),
    this.spectators(),
    this.bb!.createScalarList<number>(this.spectatorsPosition.bind(this), this.spectatorsPositionLength()),
    this.bb!.createScalarList<number>(this.rapidPosition.bind(this), this.rapidPositionLength()),
    this.watermark(),
    this.miscViewmodelChanger(),
    this.miscViewmodelX(),
    this.miscViewmodelY(),
    this.miscViewmodelZ(),
    this.miscFov(),
    this.miscRemoveScope(),
    this.miscNorecoil(),
    this.miscRemovePostProcessing(),
    this.miscRemoveLegs(),
    this.miscRemoveGrenadeCrosshair(),
    this.miscUnlockInventory(),
    this.miscRemoveBob(),
    this.miscBuybot(),
    this.miscBuybotPrimary(),
    this.miscBuybotSecondary(),
    this.miscBuybotZeus(),
    this.miscBuybotArmor(),
    this.miscBuybotGrenades(),
    this.miscGrenadePrediction(),
    this.miscPreserveKillfeed(),
    this.miscEspOof(),
    this.miscEspOofColor(),
    this.miscHitsound(),
    this.miscHitmarker()
  );
}


unpackTo(_o: miscT): void {
  _o.autopeek = this.autopeek();
  _o.duckAssist = this.duckAssist();
  _o.slowwalk = this.slowwalk();
  _o.bunnyhop = this.bunnyhop();
  _o.autoStrafe = this.autoStrafe();
  _o.miscOnshotCapsule = this.miscOnshotCapsule();
  _o.miscDarkMode = this.miscDarkMode();
  _o.disableLight = this.disableLight();
  _o.penetrationCrosshair = this.penetrationCrosshair();
  _o.forceCrosshair = this.forceCrosshair();
  _o.blur = this.blur();
  _o.worldChanger = this.worldChanger();
  _o.grenadeTrailColor = this.grenadeTrailColor();
  _o.thirdperson = this.thirdperson();
  _o.thirdpersonAmount = this.thirdpersonAmount();
  _o.smokeRemove = this.smokeRemove();
  _o.serverImpact = this.serverImpact();
  _o.clientImpact = this.clientImpact();
  _o.bulletTrace = this.bulletTrace();
  _o.bulletTraceColor = this.bulletTraceColor();
  _o.bulletTraceEnemy = this.bulletTraceEnemy();
  _o.bulletTraceEnemyColor = this.bulletTraceEnemyColor();
  _o.grenadeTrail = this.grenadeTrail();
  _o.keybind = this.keybind();
  _o.keybindPosition = this.bb!.createScalarList<number>(this.keybindPosition.bind(this), this.keybindPositionLength());
  _o.spectators = this.spectators();
  _o.spectatorsPosition = this.bb!.createScalarList<number>(this.spectatorsPosition.bind(this), this.spectatorsPositionLength());
  _o.rapidPosition = this.bb!.createScalarList<number>(this.rapidPosition.bind(this), this.rapidPositionLength());
  _o.watermark = this.watermark();
  _o.miscViewmodelChanger = this.miscViewmodelChanger();
  _o.miscViewmodelX = this.miscViewmodelX();
  _o.miscViewmodelY = this.miscViewmodelY();
  _o.miscViewmodelZ = this.miscViewmodelZ();
  _o.miscFov = this.miscFov();
  _o.miscRemoveScope = this.miscRemoveScope();
  _o.miscNorecoil = this.miscNorecoil();
  _o.miscRemovePostProcessing = this.miscRemovePostProcessing();
  _o.miscRemoveLegs = this.miscRemoveLegs();
  _o.miscRemoveGrenadeCrosshair = this.miscRemoveGrenadeCrosshair();
  _o.miscUnlockInventory = this.miscUnlockInventory();
  _o.miscRemoveBob = this.miscRemoveBob();
  _o.miscBuybot = this.miscBuybot();
  _o.miscBuybotPrimary = this.miscBuybotPrimary();
  _o.miscBuybotSecondary = this.miscBuybotSecondary();
  _o.miscBuybotZeus = this.miscBuybotZeus();
  _o.miscBuybotArmor = this.miscBuybotArmor();
  _o.miscBuybotGrenades = this.miscBuybotGrenades();
  _o.miscGrenadePrediction = this.miscGrenadePrediction();
  _o.miscPreserveKillfeed = this.miscPreserveKillfeed();
  _o.miscEspOof = this.miscEspOof();
  _o.miscEspOofColor = this.miscEspOofColor();
  _o.miscHitsound = this.miscHitsound();
  _o.miscHitmarker = this.miscHitmarker();
}
}

export class miscT implements flatbuffers.IGeneratedObject {
constructor(
  public autopeek: boolean = false,
  public duckAssist: boolean = false,
  public slowwalk: boolean = false,
  public bunnyhop: boolean = false,
  public autoStrafe: boolean = false,
  public miscOnshotCapsule: boolean = false,
  public miscDarkMode: boolean = false,
  public disableLight: boolean = false,
  public penetrationCrosshair: boolean = false,
  public forceCrosshair: boolean = false,
  public blur: boolean = false,
  public worldChanger: number = 0,
  public grenadeTrailColor: number = 0,
  public thirdperson: boolean = false,
  public thirdpersonAmount: number = 0,
  public smokeRemove: boolean = false,
  public serverImpact: boolean = false,
  public clientImpact: boolean = false,
  public bulletTrace: boolean = false,
  public bulletTraceColor: number = 0,
  public bulletTraceEnemy: boolean = false,
  public bulletTraceEnemyColor: number = 0,
  public grenadeTrail: boolean = false,
  public keybind: boolean = false,
  public keybindPosition: (number)[] = [],
  public spectators: boolean = false,
  public spectatorsPosition: (number)[] = [],
  public rapidPosition: (number)[] = [],
  public watermark: boolean = false,
  public miscViewmodelChanger: boolean = false,
  public miscViewmodelX: number = 0,
  public miscViewmodelY: number = 0,
  public miscViewmodelZ: number = 0,
  public miscFov: number = 0,
  public miscRemoveScope: boolean = false,
  public miscNorecoil: boolean = false,
  public miscRemovePostProcessing: boolean = false,
  public miscRemoveLegs: boolean = false,
  public miscRemoveGrenadeCrosshair: boolean = false,
  public miscUnlockInventory: boolean = false,
  public miscRemoveBob: boolean = false,
  public miscBuybot: boolean = false,
  public miscBuybotPrimary: number = 0,
  public miscBuybotSecondary: number = 0,
  public miscBuybotZeus: boolean = false,
  public miscBuybotArmor: boolean = false,
  public miscBuybotGrenades: boolean = false,
  public miscGrenadePrediction: boolean = false,
  public miscPreserveKillfeed: boolean = false,
  public miscEspOof: boolean = false,
  public miscEspOofColor: number = 0,
  public miscHitsound: boolean = false,
  public miscHitmarker: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const keybindPosition = misc.createKeybindPositionVector(builder, this.keybindPosition);
  const spectatorsPosition = misc.createSpectatorsPositionVector(builder, this.spectatorsPosition);
  const rapidPosition = misc.createRapidPositionVector(builder, this.rapidPosition);

  return misc.createmisc(builder,
    this.autopeek,
    this.duckAssist,
    this.slowwalk,
    this.bunnyhop,
    this.autoStrafe,
    this.miscOnshotCapsule,
    this.miscDarkMode,
    this.disableLight,
    this.penetrationCrosshair,
    this.forceCrosshair,
    this.blur,
    this.worldChanger,
    this.grenadeTrailColor,
    this.thirdperson,
    this.thirdpersonAmount,
    this.smokeRemove,
    this.serverImpact,
    this.clientImpact,
    this.bulletTrace,
    this.bulletTraceColor,
    this.bulletTraceEnemy,
    this.bulletTraceEnemyColor,
    this.grenadeTrail,
    this.keybind,
    keybindPosition,
    this.spectators,
    spectatorsPosition,
    rapidPosition,
    this.watermark,
    this.miscViewmodelChanger,
    this.miscViewmodelX,
    this.miscViewmodelY,
    this.miscViewmodelZ,
    this.miscFov,
    this.miscRemoveScope,
    this.miscNorecoil,
    this.miscRemovePostProcessing,
    this.miscRemoveLegs,
    this.miscRemoveGrenadeCrosshair,
    this.miscUnlockInventory,
    this.miscRemoveBob,
    this.miscBuybot,
    this.miscBuybotPrimary,
    this.miscBuybotSecondary,
    this.miscBuybotZeus,
    this.miscBuybotArmor,
    this.miscBuybotGrenades,
    this.miscGrenadePrediction,
    this.miscPreserveKillfeed,
    this.miscEspOof,
    this.miscEspOofColor,
    this.miscHitsound,
    this.miscHitmarker
  );
}
}
