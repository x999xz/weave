// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Config implements flatbuffers.IUnpackableObject<ConfigT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Config {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfig(bb:flatbuffers.ByteBuffer, obj?:Config):Config {
  return (obj || new Config()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfig(bb:flatbuffers.ByteBuffer, obj?:Config):Config {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Config()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

share():string|null
share(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
share(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

updated():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_updated(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

created():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_created(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

user():string|null
user(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
user(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

owner():string|null
owner(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
owner(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startConfig(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valueOffset, 0);
}

static addShare(builder:flatbuffers.Builder, shareOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, shareOffset, 0);
}

static addUpdated(builder:flatbuffers.Builder, updated:bigint) {
  builder.addFieldInt64(3, updated, BigInt('0'));
}

static addCreated(builder:flatbuffers.Builder, created:bigint) {
  builder.addFieldInt64(4, created, BigInt('0'));
}

static addUser(builder:flatbuffers.Builder, userOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, userOffset, 0);
}

static addOwner(builder:flatbuffers.Builder, ownerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, ownerOffset, 0);
}

static endConfig(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConfig(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset, shareOffset:flatbuffers.Offset, updated:bigint, created:bigint, userOffset:flatbuffers.Offset, ownerOffset:flatbuffers.Offset):flatbuffers.Offset {
  Config.startConfig(builder);
  Config.addName(builder, nameOffset);
  Config.addValue(builder, valueOffset);
  Config.addShare(builder, shareOffset);
  Config.addUpdated(builder, updated);
  Config.addCreated(builder, created);
  Config.addUser(builder, userOffset);
  Config.addOwner(builder, ownerOffset);
  return Config.endConfig(builder);
}

unpack(): ConfigT {
  return new ConfigT(
    this.name(),
    this.value(),
    this.share(),
    this.updated(),
    this.created(),
    this.user(),
    this.owner()
  );
}


unpackTo(_o: ConfigT): void {
  _o.name = this.name();
  _o.value = this.value();
  _o.share = this.share();
  _o.updated = this.updated();
  _o.created = this.created();
  _o.user = this.user();
  _o.owner = this.owner();
}
}

export class ConfigT implements flatbuffers.IGeneratedObject {
constructor(
  public name: string|Uint8Array|null = null,
  public value: string|Uint8Array|null = null,
  public share: string|Uint8Array|null = null,
  public updated: bigint = BigInt('0'),
  public created: bigint = BigInt('0'),
  public user: string|Uint8Array|null = null,
  public owner: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const value = (this.value !== null ? builder.createString(this.value!) : 0);
  const share = (this.share !== null ? builder.createString(this.share!) : 0);
  const user = (this.user !== null ? builder.createString(this.user!) : 0);
  const owner = (this.owner !== null ? builder.createString(this.owner!) : 0);

  return Config.createConfig(builder,
    name,
    value,
    share,
    this.updated,
    this.created,
    user,
    owner
  );
}
}
