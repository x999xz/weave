// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class weapons_ implements flatbuffers.IUnpackableObject<weapons_T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):weapons_ {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsweapons_(bb:flatbuffers.ByteBuffer, obj?:weapons_):weapons_ {
  return (obj || new weapons_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsweapons_(bb:flatbuffers.ByteBuffer, obj?:weapons_):weapons_ {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new weapons_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_name(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

icon():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_icon(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static startweapons_(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, name:boolean) {
  builder.addFieldInt8(0, +name, +false);
}

static addIcon(builder:flatbuffers.Builder, icon:boolean) {
  builder.addFieldInt8(1, +icon, +false);
}

static endweapons_(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createweapons_(builder:flatbuffers.Builder, name:boolean, icon:boolean):flatbuffers.Offset {
  weapons_.startweapons_(builder);
  weapons_.addName(builder, name);
  weapons_.addIcon(builder, icon);
  return weapons_.endweapons_(builder);
}

unpack(): weapons_T {
  return new weapons_T(
    this.name(),
    this.icon()
  );
}


unpackTo(_o: weapons_T): void {
  _o.name = this.name();
  _o.icon = this.icon();
}
}

export class weapons_T implements flatbuffers.IGeneratedObject {
constructor(
  public name: boolean = false,
  public icon: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return weapons_.createweapons_(builder,
    this.name,
    this.icon
  );
}
}
