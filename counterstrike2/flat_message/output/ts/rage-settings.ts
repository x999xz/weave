// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { autostop_option_, autostop_option_T } from './autostop-option-.js';
import { hitboxes_, hitboxes_T } from './hitboxes-.js';


export class rage_settings implements flatbuffers.IUnpackableObject<rage_settingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):rage_settings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsrage_settings(bb:flatbuffers.ByteBuffer, obj?:rage_settings):rage_settings {
  return (obj || new rage_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsrage_settings(bb:flatbuffers.ByteBuffer, obj?:rage_settings):rage_settings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new rage_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_m_index(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

mGroup():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_m_group(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

test():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

mutate_test(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeFloat32(this.bb_pos + offset, value);
  return true;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hitboxes(obj?:hitboxes_):hitboxes_|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new hitboxes_()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

multipoints(obj?:hitboxes_):hitboxes_|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new hitboxes_()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

autostop():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_autostop(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

autostopOption(obj?:autostop_option_):autostop_option_|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new autostop_option_()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

hitchanceAmount():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_hitchance_amount(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

pointScale():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_point_scale(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 22);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

damage():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_damage(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

static startrage_settings(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addMIndex(builder:flatbuffers.Builder, mIndex:number) {
  builder.addFieldInt32(0, mIndex, 0);
}

static addMGroup(builder:flatbuffers.Builder, mGroup:number) {
  builder.addFieldInt32(1, mGroup, 0);
}

static addTest(builder:flatbuffers.Builder, test:number) {
  builder.addFieldFloat32(2, test, 0.0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static addHitboxes(builder:flatbuffers.Builder, hitboxesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, hitboxesOffset, 0);
}

static addMultipoints(builder:flatbuffers.Builder, multipointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, multipointsOffset, 0);
}

static addAutostop(builder:flatbuffers.Builder, autostop:boolean) {
  builder.addFieldInt8(6, +autostop, +false);
}

static addAutostopOption(builder:flatbuffers.Builder, autostopOptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, autostopOptionOffset, 0);
}

static addHitchanceAmount(builder:flatbuffers.Builder, hitchanceAmount:number) {
  builder.addFieldInt32(8, hitchanceAmount, 0);
}

static addPointScale(builder:flatbuffers.Builder, pointScale:number) {
  builder.addFieldInt32(9, pointScale, 0);
}

static addDamage(builder:flatbuffers.Builder, damage:number) {
  builder.addFieldInt32(10, damage, 0);
}

static endrage_settings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): rage_settingsT {
  return new rage_settingsT(
    this.mIndex(),
    this.mGroup(),
    this.test(),
    this.name(),
    (this.hitboxes() !== null ? this.hitboxes()!.unpack() : null),
    (this.multipoints() !== null ? this.multipoints()!.unpack() : null),
    this.autostop(),
    (this.autostopOption() !== null ? this.autostopOption()!.unpack() : null),
    this.hitchanceAmount(),
    this.pointScale(),
    this.damage()
  );
}


unpackTo(_o: rage_settingsT): void {
  _o.mIndex = this.mIndex();
  _o.mGroup = this.mGroup();
  _o.test = this.test();
  _o.name = this.name();
  _o.hitboxes = (this.hitboxes() !== null ? this.hitboxes()!.unpack() : null);
  _o.multipoints = (this.multipoints() !== null ? this.multipoints()!.unpack() : null);
  _o.autostop = this.autostop();
  _o.autostopOption = (this.autostopOption() !== null ? this.autostopOption()!.unpack() : null);
  _o.hitchanceAmount = this.hitchanceAmount();
  _o.pointScale = this.pointScale();
  _o.damage = this.damage();
}
}

export class rage_settingsT implements flatbuffers.IGeneratedObject {
constructor(
  public mIndex: number = 0,
  public mGroup: number = 0,
  public test: number = 0.0,
  public name: string|Uint8Array|null = null,
  public hitboxes: hitboxes_T|null = null,
  public multipoints: hitboxes_T|null = null,
  public autostop: boolean = false,
  public autostopOption: autostop_option_T|null = null,
  public hitchanceAmount: number = 0,
  public pointScale: number = 0,
  public damage: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);
  const hitboxes = (this.hitboxes !== null ? this.hitboxes!.pack(builder) : 0);
  const multipoints = (this.multipoints !== null ? this.multipoints!.pack(builder) : 0);
  const autostopOption = (this.autostopOption !== null ? this.autostopOption!.pack(builder) : 0);

  rage_settings.startrage_settings(builder);
  rage_settings.addMIndex(builder, this.mIndex);
  rage_settings.addMGroup(builder, this.mGroup);
  rage_settings.addTest(builder, this.test);
  rage_settings.addName(builder, name);
  rage_settings.addHitboxes(builder, hitboxes);
  rage_settings.addMultipoints(builder, multipoints);
  rage_settings.addAutostop(builder, this.autostop);
  rage_settings.addAutostopOption(builder, autostopOption);
  rage_settings.addHitchanceAmount(builder, this.hitchanceAmount);
  rage_settings.addPointScale(builder, this.pointScale);
  rage_settings.addDamage(builder, this.damage);

  return rage_settings.endrage_settings(builder);
}
}
