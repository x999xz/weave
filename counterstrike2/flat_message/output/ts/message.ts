// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class Message implements flatbuffers.IUnpackableObject<MessageT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

sticky():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_sticky(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

time():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

mutate_time(value:bigint):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint64(this.bb_pos + offset, value);
  return true;
}

static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, usernameOffset, 0);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, messageOffset, 0);
}

static addSticky(builder:flatbuffers.Builder, sticky:boolean) {
  builder.addFieldInt8(2, +sticky, +false);
}

static addTime(builder:flatbuffers.Builder, time:bigint) {
  builder.addFieldInt64(3, time, BigInt('0'));
}

static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMessage(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset, messageOffset:flatbuffers.Offset, sticky:boolean, time:bigint):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addUsername(builder, usernameOffset);
  Message.addMessage(builder, messageOffset);
  Message.addSticky(builder, sticky);
  Message.addTime(builder, time);
  return Message.endMessage(builder);
}

unpack(): MessageT {
  return new MessageT(
    this.username(),
    this.message(),
    this.sticky(),
    this.time()
  );
}


unpackTo(_o: MessageT): void {
  _o.username = this.username();
  _o.message = this.message();
  _o.sticky = this.sticky();
  _o.time = this.time();
}
}

export class MessageT implements flatbuffers.IGeneratedObject {
constructor(
  public username: string|Uint8Array|null = null,
  public message: string|Uint8Array|null = null,
  public sticky: boolean = false,
  public time: bigint = BigInt('0')
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const username = (this.username !== null ? builder.createString(this.username!) : 0);
  const message = (this.message !== null ? builder.createString(this.message!) : 0);

  return Message.createMessage(builder,
    username,
    message,
    this.sticky,
    this.time
  );
}
}
