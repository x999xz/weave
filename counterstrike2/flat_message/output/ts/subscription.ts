// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Build, BuildT } from './build.js';


export class Subscription implements flatbuffers.IUnpackableObject<SubscriptionT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Subscription {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSubscription(bb:flatbuffers.ByteBuffer, obj?:Subscription):Subscription {
  return (obj || new Subscription()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSubscription(bb:flatbuffers.ByteBuffer, obj?:Subscription):Subscription {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Subscription()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

cs2(index: number, obj?:Build):Build|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Build()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

cs2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dota2(index: number, obj?:Build):Build|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Build()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

dota2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSubscription(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCs2(builder:flatbuffers.Builder, cs2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, cs2Offset, 0);
}

static createCs2Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCs2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addDota2(builder:flatbuffers.Builder, dota2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, dota2Offset, 0);
}

static createDota2Vector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startDota2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSubscription(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSubscription(builder:flatbuffers.Builder, cs2Offset:flatbuffers.Offset, dota2Offset:flatbuffers.Offset):flatbuffers.Offset {
  Subscription.startSubscription(builder);
  Subscription.addCs2(builder, cs2Offset);
  Subscription.addDota2(builder, dota2Offset);
  return Subscription.endSubscription(builder);
}

unpack(): SubscriptionT {
  return new SubscriptionT(
    this.bb!.createObjList<Build, BuildT>(this.cs2.bind(this), this.cs2Length()),
    this.bb!.createObjList<Build, BuildT>(this.dota2.bind(this), this.dota2Length())
  );
}


unpackTo(_o: SubscriptionT): void {
  _o.cs2 = this.bb!.createObjList<Build, BuildT>(this.cs2.bind(this), this.cs2Length());
  _o.dota2 = this.bb!.createObjList<Build, BuildT>(this.dota2.bind(this), this.dota2Length());
}
}

export class SubscriptionT implements flatbuffers.IGeneratedObject {
constructor(
  public cs2: (BuildT)[] = [],
  public dota2: (BuildT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const cs2 = Subscription.createCs2Vector(builder, builder.createObjectOffsetList(this.cs2));
  const dota2 = Subscription.createDota2Vector(builder, builder.createObjectOffsetList(this.dota2));

  return Subscription.createSubscription(builder,
    cs2,
    dota2
  );
}
}
