// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class rage_global_settings implements flatbuffers.IUnpackableObject<rage_global_settingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):rage_global_settings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsrage_global_settings(bb:flatbuffers.ByteBuffer, obj?:rage_global_settings):rage_global_settings {
  return (obj || new rage_global_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsrage_global_settings(bb:flatbuffers.ByteBuffer, obj?:rage_global_settings):rage_global_settings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new rage_global_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mEnabled():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_enabled(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mAutoFire():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_auto_fire(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mAutoScope():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_auto_scope(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mSilent():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_silent(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mPenetration():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_penetration(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mNospread():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_nospread(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mNorecoil():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_norecoil(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mHideshots():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_hideshots(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

backtrackMode():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_backtrack_mode(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

static startrage_global_settings(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addMEnabled(builder:flatbuffers.Builder, mEnabled:boolean) {
  builder.addFieldInt8(0, +mEnabled, +false);
}

static addMAutoFire(builder:flatbuffers.Builder, mAutoFire:boolean) {
  builder.addFieldInt8(1, +mAutoFire, +false);
}

static addMAutoScope(builder:flatbuffers.Builder, mAutoScope:boolean) {
  builder.addFieldInt8(2, +mAutoScope, +false);
}

static addMSilent(builder:flatbuffers.Builder, mSilent:boolean) {
  builder.addFieldInt8(3, +mSilent, +false);
}

static addMPenetration(builder:flatbuffers.Builder, mPenetration:boolean) {
  builder.addFieldInt8(4, +mPenetration, +false);
}

static addMNospread(builder:flatbuffers.Builder, mNospread:boolean) {
  builder.addFieldInt8(5, +mNospread, +false);
}

static addMNorecoil(builder:flatbuffers.Builder, mNorecoil:boolean) {
  builder.addFieldInt8(6, +mNorecoil, +false);
}

static addMHideshots(builder:flatbuffers.Builder, mHideshots:boolean) {
  builder.addFieldInt8(7, +mHideshots, +false);
}

static addBacktrackMode(builder:flatbuffers.Builder, backtrackMode:number) {
  builder.addFieldInt32(8, backtrackMode, 0);
}

static endrage_global_settings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createrage_global_settings(builder:flatbuffers.Builder, mEnabled:boolean, mAutoFire:boolean, mAutoScope:boolean, mSilent:boolean, mPenetration:boolean, mNospread:boolean, mNorecoil:boolean, mHideshots:boolean, backtrackMode:number):flatbuffers.Offset {
  rage_global_settings.startrage_global_settings(builder);
  rage_global_settings.addMEnabled(builder, mEnabled);
  rage_global_settings.addMAutoFire(builder, mAutoFire);
  rage_global_settings.addMAutoScope(builder, mAutoScope);
  rage_global_settings.addMSilent(builder, mSilent);
  rage_global_settings.addMPenetration(builder, mPenetration);
  rage_global_settings.addMNospread(builder, mNospread);
  rage_global_settings.addMNorecoil(builder, mNorecoil);
  rage_global_settings.addMHideshots(builder, mHideshots);
  rage_global_settings.addBacktrackMode(builder, backtrackMode);
  return rage_global_settings.endrage_global_settings(builder);
}

unpack(): rage_global_settingsT {
  return new rage_global_settingsT(
    this.mEnabled(),
    this.mAutoFire(),
    this.mAutoScope(),
    this.mSilent(),
    this.mPenetration(),
    this.mNospread(),
    this.mNorecoil(),
    this.mHideshots(),
    this.backtrackMode()
  );
}


unpackTo(_o: rage_global_settingsT): void {
  _o.mEnabled = this.mEnabled();
  _o.mAutoFire = this.mAutoFire();
  _o.mAutoScope = this.mAutoScope();
  _o.mSilent = this.mSilent();
  _o.mPenetration = this.mPenetration();
  _o.mNospread = this.mNospread();
  _o.mNorecoil = this.mNorecoil();
  _o.mHideshots = this.mHideshots();
  _o.backtrackMode = this.backtrackMode();
}
}

export class rage_global_settingsT implements flatbuffers.IGeneratedObject {
constructor(
  public mEnabled: boolean = false,
  public mAutoFire: boolean = false,
  public mAutoScope: boolean = false,
  public mSilent: boolean = false,
  public mPenetration: boolean = false,
  public mNospread: boolean = false,
  public mNorecoil: boolean = false,
  public mHideshots: boolean = false,
  public backtrackMode: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return rage_global_settings.createrage_global_settings(builder,
    this.mEnabled,
    this.mAutoFire,
    this.mAutoScope,
    this.mSilent,
    this.mPenetration,
    this.mNospread,
    this.mNorecoil,
    this.mHideshots,
    this.backtrackMode
  );
}
}
