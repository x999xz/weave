// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class legit_settings implements flatbuffers.IUnpackableObject<legit_settingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):legit_settings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAslegit_settings(bb:flatbuffers.ByteBuffer, obj?:legit_settings):legit_settings {
  return (obj || new legit_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAslegit_settings(bb:flatbuffers.ByteBuffer, obj?:legit_settings):legit_settings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new legit_settings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_m_index(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

mGroup():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_m_group(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

test():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

mutate_test(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeFloat32(this.bb_pos + offset, value);
  return true;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startlegit_settings(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMIndex(builder:flatbuffers.Builder, mIndex:number) {
  builder.addFieldInt32(0, mIndex, 0);
}

static addMGroup(builder:flatbuffers.Builder, mGroup:number) {
  builder.addFieldInt32(1, mGroup, 0);
}

static addTest(builder:flatbuffers.Builder, test:number) {
  builder.addFieldFloat32(2, test, 0.0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static endlegit_settings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createlegit_settings(builder:flatbuffers.Builder, mIndex:number, mGroup:number, test:number, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  legit_settings.startlegit_settings(builder);
  legit_settings.addMIndex(builder, mIndex);
  legit_settings.addMGroup(builder, mGroup);
  legit_settings.addTest(builder, test);
  legit_settings.addName(builder, nameOffset);
  return legit_settings.endlegit_settings(builder);
}

unpack(): legit_settingsT {
  return new legit_settingsT(
    this.mIndex(),
    this.mGroup(),
    this.test(),
    this.name()
  );
}


unpackTo(_o: legit_settingsT): void {
  _o.mIndex = this.mIndex();
  _o.mGroup = this.mGroup();
  _o.test = this.test();
  _o.name = this.name();
}
}

export class legit_settingsT implements flatbuffers.IGeneratedObject {
constructor(
  public mIndex: number = 0,
  public mGroup: number = 0,
  public test: number = 0.0,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return legit_settings.createlegit_settings(builder,
    this.mIndex,
    this.mGroup,
    this.test,
    name
  );
}
}
