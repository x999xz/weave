// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class LoaderUser implements flatbuffers.IUnpackableObject<LoaderUserT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LoaderUser {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLoaderUser(bb:flatbuffers.ByteBuffer, obj?:LoaderUser):LoaderUser {
  return (obj || new LoaderUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLoaderUser(bb:flatbuffers.ByteBuffer, obj?:LoaderUser):LoaderUser {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LoaderUser()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

username():string|null
username(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
username(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

prefix():string|null
prefix(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
prefix(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

id():string|null
id(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
id(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLoaderUser(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addUsername(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, usernameOffset, 0);
}

static addPrefix(builder:flatbuffers.Builder, prefixOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, prefixOffset, 0);
}

static addId(builder:flatbuffers.Builder, idOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, idOffset, 0);
}

static endLoaderUser(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLoaderUser(builder:flatbuffers.Builder, usernameOffset:flatbuffers.Offset, prefixOffset:flatbuffers.Offset, idOffset:flatbuffers.Offset):flatbuffers.Offset {
  LoaderUser.startLoaderUser(builder);
  LoaderUser.addUsername(builder, usernameOffset);
  LoaderUser.addPrefix(builder, prefixOffset);
  LoaderUser.addId(builder, idOffset);
  return LoaderUser.endLoaderUser(builder);
}

unpack(): LoaderUserT {
  return new LoaderUserT(
    this.username(),
    this.prefix(),
    this.id()
  );
}


unpackTo(_o: LoaderUserT): void {
  _o.username = this.username();
  _o.prefix = this.prefix();
  _o.id = this.id();
}
}

export class LoaderUserT implements flatbuffers.IGeneratedObject {
constructor(
  public username: string|Uint8Array|null = null,
  public prefix: string|Uint8Array|null = null,
  public id: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const username = (this.username !== null ? builder.createString(this.username!) : 0);
  const prefix = (this.prefix !== null ? builder.createString(this.prefix!) : 0);
  const id = (this.id !== null ? builder.createString(this.id!) : 0);

  return LoaderUser.createLoaderUser(builder,
    username,
    prefix,
    id
  );
}
}
