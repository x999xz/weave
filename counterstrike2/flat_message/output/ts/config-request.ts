// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class config_request implements flatbuffers.IUnpackableObject<config_requestT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):config_request {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsconfig_request(bb:flatbuffers.ByteBuffer, obj?:config_request):config_request {
  return (obj || new config_request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsconfig_request(bb:flatbuffers.ByteBuffer, obj?:config_request):config_request {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new config_request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

token():string|null
token(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
token(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

share():string|null
share(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
share(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

value():string|null
value(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
value(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startconfig_request(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addToken(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, tokenOffset, 0);
}

static addShare(builder:flatbuffers.Builder, shareOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shareOffset, 0);
}

static addValue(builder:flatbuffers.Builder, valueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueOffset, 0);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, nameOffset, 0);
}

static endconfig_request(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createconfig_request(builder:flatbuffers.Builder, tokenOffset:flatbuffers.Offset, shareOffset:flatbuffers.Offset, valueOffset:flatbuffers.Offset, nameOffset:flatbuffers.Offset):flatbuffers.Offset {
  config_request.startconfig_request(builder);
  config_request.addToken(builder, tokenOffset);
  config_request.addShare(builder, shareOffset);
  config_request.addValue(builder, valueOffset);
  config_request.addName(builder, nameOffset);
  return config_request.endconfig_request(builder);
}

unpack(): config_requestT {
  return new config_requestT(
    this.token(),
    this.share(),
    this.value(),
    this.name()
  );
}


unpackTo(_o: config_requestT): void {
  _o.token = this.token();
  _o.share = this.share();
  _o.value = this.value();
  _o.name = this.name();
}
}

export class config_requestT implements flatbuffers.IGeneratedObject {
constructor(
  public token: string|Uint8Array|null = null,
  public share: string|Uint8Array|null = null,
  public value: string|Uint8Array|null = null,
  public name: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const token = (this.token !== null ? builder.createString(this.token!) : 0);
  const share = (this.share !== null ? builder.createString(this.share!) : 0);
  const value = (this.value !== null ? builder.createString(this.value!) : 0);
  const name = (this.name !== null ? builder.createString(this.name!) : 0);

  return config_request.createconfig_request(builder,
    token,
    share,
    value,
    name
  );
}
}
