// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { flags_, flags_T } from './flags-.js';
import { weapons_, weapons_T } from './weapons-.js';


export class visuals implements flatbuffers.IUnpackableObject<visualsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):visuals {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsvisuals(bb:flatbuffers.ByteBuffer, obj?:visuals):visuals {
  return (obj || new visuals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsvisuals(bb:flatbuffers.ByteBuffer, obj?:visuals):visuals {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new visuals()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_name(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

nameColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_name_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

box():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_box(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

boxColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_box_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

avatar():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_avatar(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

health():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_health(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

flags(obj?:flags_):flags_|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new flags_()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

skeleton():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_skeleton(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 18);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

skeletonColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_skeleton_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

mWeapons(obj?:weapons_):weapons_|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new weapons_()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

chamsVisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_chams_visible(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 24);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

chamsVisibleColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_chams_visible_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 26);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

chamsType():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

mutate_chams_type(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

chamsInvisible():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_chams_invisible(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

chamsInvisibleColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_chams_invisible_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 32);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

attachmentChams():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_attachment_chams(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 34);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

attachmentChamsColor():number {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

mutate_attachment_chams_color(value:number):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 36);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeUint32(this.bb_pos + offset, value);
  return true;
}

static startvisuals(builder:flatbuffers.Builder) {
  builder.startObject(17);
}

static addName(builder:flatbuffers.Builder, name:boolean) {
  builder.addFieldInt8(0, +name, +false);
}

static addNameColor(builder:flatbuffers.Builder, nameColor:number) {
  builder.addFieldInt32(1, nameColor, 0);
}

static addBox(builder:flatbuffers.Builder, box:boolean) {
  builder.addFieldInt8(2, +box, +false);
}

static addBoxColor(builder:flatbuffers.Builder, boxColor:number) {
  builder.addFieldInt32(3, boxColor, 0);
}

static addAvatar(builder:flatbuffers.Builder, avatar:boolean) {
  builder.addFieldInt8(4, +avatar, +false);
}

static addHealth(builder:flatbuffers.Builder, health:boolean) {
  builder.addFieldInt8(5, +health, +false);
}

static addFlags(builder:flatbuffers.Builder, flagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, flagsOffset, 0);
}

static addSkeleton(builder:flatbuffers.Builder, skeleton:boolean) {
  builder.addFieldInt8(7, +skeleton, +false);
}

static addSkeletonColor(builder:flatbuffers.Builder, skeletonColor:number) {
  builder.addFieldInt32(8, skeletonColor, 0);
}

static addMWeapons(builder:flatbuffers.Builder, mWeaponsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, mWeaponsOffset, 0);
}

static addChamsVisible(builder:flatbuffers.Builder, chamsVisible:boolean) {
  builder.addFieldInt8(10, +chamsVisible, +false);
}

static addChamsVisibleColor(builder:flatbuffers.Builder, chamsVisibleColor:number) {
  builder.addFieldInt32(11, chamsVisibleColor, 0);
}

static addChamsType(builder:flatbuffers.Builder, chamsType:number) {
  builder.addFieldInt32(12, chamsType, 0);
}

static addChamsInvisible(builder:flatbuffers.Builder, chamsInvisible:boolean) {
  builder.addFieldInt8(13, +chamsInvisible, +false);
}

static addChamsInvisibleColor(builder:flatbuffers.Builder, chamsInvisibleColor:number) {
  builder.addFieldInt32(14, chamsInvisibleColor, 0);
}

static addAttachmentChams(builder:flatbuffers.Builder, attachmentChams:boolean) {
  builder.addFieldInt8(15, +attachmentChams, +false);
}

static addAttachmentChamsColor(builder:flatbuffers.Builder, attachmentChamsColor:number) {
  builder.addFieldInt32(16, attachmentChamsColor, 0);
}

static endvisuals(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): visualsT {
  return new visualsT(
    this.name(),
    this.nameColor(),
    this.box(),
    this.boxColor(),
    this.avatar(),
    this.health(),
    (this.flags() !== null ? this.flags()!.unpack() : null),
    this.skeleton(),
    this.skeletonColor(),
    (this.mWeapons() !== null ? this.mWeapons()!.unpack() : null),
    this.chamsVisible(),
    this.chamsVisibleColor(),
    this.chamsType(),
    this.chamsInvisible(),
    this.chamsInvisibleColor(),
    this.attachmentChams(),
    this.attachmentChamsColor()
  );
}


unpackTo(_o: visualsT): void {
  _o.name = this.name();
  _o.nameColor = this.nameColor();
  _o.box = this.box();
  _o.boxColor = this.boxColor();
  _o.avatar = this.avatar();
  _o.health = this.health();
  _o.flags = (this.flags() !== null ? this.flags()!.unpack() : null);
  _o.skeleton = this.skeleton();
  _o.skeletonColor = this.skeletonColor();
  _o.mWeapons = (this.mWeapons() !== null ? this.mWeapons()!.unpack() : null);
  _o.chamsVisible = this.chamsVisible();
  _o.chamsVisibleColor = this.chamsVisibleColor();
  _o.chamsType = this.chamsType();
  _o.chamsInvisible = this.chamsInvisible();
  _o.chamsInvisibleColor = this.chamsInvisibleColor();
  _o.attachmentChams = this.attachmentChams();
  _o.attachmentChamsColor = this.attachmentChamsColor();
}
}

export class visualsT implements flatbuffers.IGeneratedObject {
constructor(
  public name: boolean = false,
  public nameColor: number = 0,
  public box: boolean = false,
  public boxColor: number = 0,
  public avatar: boolean = false,
  public health: boolean = false,
  public flags: flags_T|null = null,
  public skeleton: boolean = false,
  public skeletonColor: number = 0,
  public mWeapons: weapons_T|null = null,
  public chamsVisible: boolean = false,
  public chamsVisibleColor: number = 0,
  public chamsType: number = 0,
  public chamsInvisible: boolean = false,
  public chamsInvisibleColor: number = 0,
  public attachmentChams: boolean = false,
  public attachmentChamsColor: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const flags = (this.flags !== null ? this.flags!.pack(builder) : 0);
  const mWeapons = (this.mWeapons !== null ? this.mWeapons!.pack(builder) : 0);

  visuals.startvisuals(builder);
  visuals.addName(builder, this.name);
  visuals.addNameColor(builder, this.nameColor);
  visuals.addBox(builder, this.box);
  visuals.addBoxColor(builder, this.boxColor);
  visuals.addAvatar(builder, this.avatar);
  visuals.addHealth(builder, this.health);
  visuals.addFlags(builder, flags);
  visuals.addSkeleton(builder, this.skeleton);
  visuals.addSkeletonColor(builder, this.skeletonColor);
  visuals.addMWeapons(builder, mWeapons);
  visuals.addChamsVisible(builder, this.chamsVisible);
  visuals.addChamsVisibleColor(builder, this.chamsVisibleColor);
  visuals.addChamsType(builder, this.chamsType);
  visuals.addChamsInvisible(builder, this.chamsInvisible);
  visuals.addChamsInvisibleColor(builder, this.chamsInvisibleColor);
  visuals.addAttachmentChams(builder, this.attachmentChams);
  visuals.addAttachmentChamsColor(builder, this.attachmentChamsColor);

  return visuals.endvisuals(builder);
}
}
