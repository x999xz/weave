// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';



export class hitboxes_ implements flatbuffers.IUnpackableObject<hitboxes_T> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):hitboxes_ {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAshitboxes_(bb:flatbuffers.ByteBuffer, obj?:hitboxes_):hitboxes_ {
  return (obj || new hitboxes_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAshitboxes_(bb:flatbuffers.ByteBuffer, obj?:hitboxes_):hitboxes_ {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new hitboxes_()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mHead():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_head(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mChest():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_chest(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mStomach():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_stomach(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mArms():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_arms(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mLegs():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_legs(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mFoot():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_foot(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static starthitboxes_(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addMHead(builder:flatbuffers.Builder, mHead:boolean) {
  builder.addFieldInt8(0, +mHead, +false);
}

static addMChest(builder:flatbuffers.Builder, mChest:boolean) {
  builder.addFieldInt8(1, +mChest, +false);
}

static addMStomach(builder:flatbuffers.Builder, mStomach:boolean) {
  builder.addFieldInt8(2, +mStomach, +false);
}

static addMArms(builder:flatbuffers.Builder, mArms:boolean) {
  builder.addFieldInt8(3, +mArms, +false);
}

static addMLegs(builder:flatbuffers.Builder, mLegs:boolean) {
  builder.addFieldInt8(4, +mLegs, +false);
}

static addMFoot(builder:flatbuffers.Builder, mFoot:boolean) {
  builder.addFieldInt8(5, +mFoot, +false);
}

static endhitboxes_(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createhitboxes_(builder:flatbuffers.Builder, mHead:boolean, mChest:boolean, mStomach:boolean, mArms:boolean, mLegs:boolean, mFoot:boolean):flatbuffers.Offset {
  hitboxes_.starthitboxes_(builder);
  hitboxes_.addMHead(builder, mHead);
  hitboxes_.addMChest(builder, mChest);
  hitboxes_.addMStomach(builder, mStomach);
  hitboxes_.addMArms(builder, mArms);
  hitboxes_.addMLegs(builder, mLegs);
  hitboxes_.addMFoot(builder, mFoot);
  return hitboxes_.endhitboxes_(builder);
}

unpack(): hitboxes_T {
  return new hitboxes_T(
    this.mHead(),
    this.mChest(),
    this.mStomach(),
    this.mArms(),
    this.mLegs(),
    this.mFoot()
  );
}


unpackTo(_o: hitboxes_T): void {
  _o.mHead = this.mHead();
  _o.mChest = this.mChest();
  _o.mStomach = this.mStomach();
  _o.mArms = this.mArms();
  _o.mLegs = this.mLegs();
  _o.mFoot = this.mFoot();
}
}

export class hitboxes_T implements flatbuffers.IGeneratedObject {
constructor(
  public mHead: boolean = false,
  public mChest: boolean = false,
  public mStomach: boolean = false,
  public mArms: boolean = false,
  public mLegs: boolean = false,
  public mFoot: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return hitboxes_.createhitboxes_(builder,
    this.mHead,
    this.mChest,
    this.mStomach,
    this.mArms,
    this.mLegs,
    this.mFoot
  );
}
}
