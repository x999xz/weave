// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Hotkey_, Hotkey_T } from './hotkey-.js';
import { Inventory, InventoryT } from './inventory.js';
import { Item, ItemT } from './item.js';
import { antiaim, antiaimT } from './antiaim.js';
import { legit_settings, legit_settingsT } from './legit-settings.js';
import { misc, miscT } from './misc.js';
import { rage_global_settings, rage_global_settingsT } from './rage-global-settings.js';
import { rage_settings, rage_settingsT } from './rage-settings.js';
import { visuals, visualsT } from './visuals.js';


export class ConfigSettings implements flatbuffers.IUnpackableObject<ConfigSettingsT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConfigSettings {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConfigSettings(bb:flatbuffers.ByteBuffer, obj?:ConfigSettings):ConfigSettings {
  return (obj || new ConfigSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConfigSettings(bb:flatbuffers.ByteBuffer, obj?:ConfigSettings):ConfigSettings {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConfigSettings()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mVerify():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_m_verify(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

mAntiaim(obj?:antiaim):antiaim|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new antiaim()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mLegitWeapons(index: number, obj?:legit_settings):legit_settings|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new legit_settings()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mLegitWeaponsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mRageGlobalSettings(obj?:rage_global_settings):rage_global_settings|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new rage_global_settings()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mRageWeapons(index: number, obj?:rage_settings):rage_settings|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new rage_settings()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mRageWeaponsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mVisuals(obj?:visuals):visuals|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new visuals()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mMisc(obj?:misc):misc|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new misc()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

mBinds(index: number, obj?:Hotkey_):Hotkey_|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Hotkey_()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mBindsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mEquipInventory(index: number, obj?:Inventory):Inventory|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Inventory()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mEquipInventoryLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

mAddedItem(index: number, obj?:Item):Item|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? (obj || new Item()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

mAddedItemLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startConfigSettings(builder:flatbuffers.Builder) {
  builder.startObject(10);
}

static addMVerify(builder:flatbuffers.Builder, mVerify:boolean) {
  builder.addFieldInt8(0, +mVerify, +false);
}

static addMAntiaim(builder:flatbuffers.Builder, mAntiaimOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mAntiaimOffset, 0);
}

static addMLegitWeapons(builder:flatbuffers.Builder, mLegitWeaponsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, mLegitWeaponsOffset, 0);
}

static createMLegitWeaponsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMLegitWeaponsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMRageGlobalSettings(builder:flatbuffers.Builder, mRageGlobalSettingsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, mRageGlobalSettingsOffset, 0);
}

static addMRageWeapons(builder:flatbuffers.Builder, mRageWeaponsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, mRageWeaponsOffset, 0);
}

static createMRageWeaponsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMRageWeaponsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMVisuals(builder:flatbuffers.Builder, mVisualsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, mVisualsOffset, 0);
}

static addMMisc(builder:flatbuffers.Builder, mMiscOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, mMiscOffset, 0);
}

static addMBinds(builder:flatbuffers.Builder, mBindsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, mBindsOffset, 0);
}

static createMBindsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMBindsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMEquipInventory(builder:flatbuffers.Builder, mEquipInventoryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, mEquipInventoryOffset, 0);
}

static createMEquipInventoryVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMEquipInventoryVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addMAddedItem(builder:flatbuffers.Builder, mAddedItemOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, mAddedItemOffset, 0);
}

static createMAddedItemVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMAddedItemVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endConfigSettings(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}


unpack(): ConfigSettingsT {
  return new ConfigSettingsT(
    this.mVerify(),
    (this.mAntiaim() !== null ? this.mAntiaim()!.unpack() : null),
    this.bb!.createObjList<legit_settings, legit_settingsT>(this.mLegitWeapons.bind(this), this.mLegitWeaponsLength()),
    (this.mRageGlobalSettings() !== null ? this.mRageGlobalSettings()!.unpack() : null),
    this.bb!.createObjList<rage_settings, rage_settingsT>(this.mRageWeapons.bind(this), this.mRageWeaponsLength()),
    (this.mVisuals() !== null ? this.mVisuals()!.unpack() : null),
    (this.mMisc() !== null ? this.mMisc()!.unpack() : null),
    this.bb!.createObjList<Hotkey_, Hotkey_T>(this.mBinds.bind(this), this.mBindsLength()),
    this.bb!.createObjList<Inventory, InventoryT>(this.mEquipInventory.bind(this), this.mEquipInventoryLength()),
    this.bb!.createObjList<Item, ItemT>(this.mAddedItem.bind(this), this.mAddedItemLength())
  );
}


unpackTo(_o: ConfigSettingsT): void {
  _o.mVerify = this.mVerify();
  _o.mAntiaim = (this.mAntiaim() !== null ? this.mAntiaim()!.unpack() : null);
  _o.mLegitWeapons = this.bb!.createObjList<legit_settings, legit_settingsT>(this.mLegitWeapons.bind(this), this.mLegitWeaponsLength());
  _o.mRageGlobalSettings = (this.mRageGlobalSettings() !== null ? this.mRageGlobalSettings()!.unpack() : null);
  _o.mRageWeapons = this.bb!.createObjList<rage_settings, rage_settingsT>(this.mRageWeapons.bind(this), this.mRageWeaponsLength());
  _o.mVisuals = (this.mVisuals() !== null ? this.mVisuals()!.unpack() : null);
  _o.mMisc = (this.mMisc() !== null ? this.mMisc()!.unpack() : null);
  _o.mBinds = this.bb!.createObjList<Hotkey_, Hotkey_T>(this.mBinds.bind(this), this.mBindsLength());
  _o.mEquipInventory = this.bb!.createObjList<Inventory, InventoryT>(this.mEquipInventory.bind(this), this.mEquipInventoryLength());
  _o.mAddedItem = this.bb!.createObjList<Item, ItemT>(this.mAddedItem.bind(this), this.mAddedItemLength());
}
}

export class ConfigSettingsT implements flatbuffers.IGeneratedObject {
constructor(
  public mVerify: boolean = false,
  public mAntiaim: antiaimT|null = null,
  public mLegitWeapons: (legit_settingsT)[] = [],
  public mRageGlobalSettings: rage_global_settingsT|null = null,
  public mRageWeapons: (rage_settingsT)[] = [],
  public mVisuals: visualsT|null = null,
  public mMisc: miscT|null = null,
  public mBinds: (Hotkey_T)[] = [],
  public mEquipInventory: (InventoryT)[] = [],
  public mAddedItem: (ItemT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const mAntiaim = (this.mAntiaim !== null ? this.mAntiaim!.pack(builder) : 0);
  const mLegitWeapons = ConfigSettings.createMLegitWeaponsVector(builder, builder.createObjectOffsetList(this.mLegitWeapons));
  const mRageGlobalSettings = (this.mRageGlobalSettings !== null ? this.mRageGlobalSettings!.pack(builder) : 0);
  const mRageWeapons = ConfigSettings.createMRageWeaponsVector(builder, builder.createObjectOffsetList(this.mRageWeapons));
  const mVisuals = (this.mVisuals !== null ? this.mVisuals!.pack(builder) : 0);
  const mMisc = (this.mMisc !== null ? this.mMisc!.pack(builder) : 0);
  const mBinds = ConfigSettings.createMBindsVector(builder, builder.createObjectOffsetList(this.mBinds));
  const mEquipInventory = ConfigSettings.createMEquipInventoryVector(builder, builder.createObjectOffsetList(this.mEquipInventory));
  const mAddedItem = ConfigSettings.createMAddedItemVector(builder, builder.createObjectOffsetList(this.mAddedItem));

  ConfigSettings.startConfigSettings(builder);
  ConfigSettings.addMVerify(builder, this.mVerify);
  ConfigSettings.addMAntiaim(builder, mAntiaim);
  ConfigSettings.addMLegitWeapons(builder, mLegitWeapons);
  ConfigSettings.addMRageGlobalSettings(builder, mRageGlobalSettings);
  ConfigSettings.addMRageWeapons(builder, mRageWeapons);
  ConfigSettings.addMVisuals(builder, mVisuals);
  ConfigSettings.addMMisc(builder, mMisc);
  ConfigSettings.addMBinds(builder, mBinds);
  ConfigSettings.addMEquipInventory(builder, mEquipInventory);
  ConfigSettings.addMAddedItem(builder, mAddedItem);

  return ConfigSettings.endConfigSettings(builder);
}
}
