// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUTHENTICATION_H_
#define FLATBUFFERS_GENERATED_AUTHENTICATION_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Authentication;
struct AuthenticationBuilder;
struct AuthenticationT;

bool operator==(const AuthenticationT &lhs, const AuthenticationT &rhs);
bool operator!=(const AuthenticationT &lhs, const AuthenticationT &rhs);

inline const ::flatbuffers::TypeTable *AuthenticationTypeTable();

struct AuthenticationT : public ::flatbuffers::NativeTable {
  typedef Authentication TableType;
  std::string token{};
  std::string build{};
};

struct Authentication FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AuthenticationT NativeTableType;
  typedef AuthenticationBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AuthenticationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_BUILD = 6
  };
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  ::flatbuffers::String *mutable_token() {
    return GetPointer<::flatbuffers::String *>(VT_TOKEN);
  }
  const ::flatbuffers::String *build() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUILD);
  }
  ::flatbuffers::String *mutable_build() {
    return GetPointer<::flatbuffers::String *>(VT_BUILD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           VerifyOffset(verifier, VT_BUILD) &&
           verifier.VerifyString(build()) &&
           verifier.EndTable();
  }
  AuthenticationT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AuthenticationT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Authentication> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AuthenticationT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AuthenticationBuilder {
  typedef Authentication Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(Authentication::VT_TOKEN, token);
  }
  void add_build(::flatbuffers::Offset<::flatbuffers::String> build) {
    fbb_.AddOffset(Authentication::VT_BUILD, build);
  }
  explicit AuthenticationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Authentication> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Authentication>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Authentication> CreateAuthentication(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0,
    ::flatbuffers::Offset<::flatbuffers::String> build = 0) {
  AuthenticationBuilder builder_(_fbb);
  builder_.add_build(build);
  builder_.add_token(token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Authentication> CreateAuthenticationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr,
    const char *build = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  auto build__ = build ? _fbb.CreateString(build) : 0;
  return CreateAuthentication(
      _fbb,
      token__,
      build__);
}

::flatbuffers::Offset<Authentication> CreateAuthentication(::flatbuffers::FlatBufferBuilder &_fbb, const AuthenticationT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const AuthenticationT &lhs, const AuthenticationT &rhs) {
  return
      (lhs.token == rhs.token) &&
      (lhs.build == rhs.build);
}

inline bool operator!=(const AuthenticationT &lhs, const AuthenticationT &rhs) {
    return !(lhs == rhs);
}


inline AuthenticationT *Authentication::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AuthenticationT>(new AuthenticationT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Authentication::UnPackTo(AuthenticationT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = token(); if (_e) _o->token = _e->str(); }
  { auto _e = build(); if (_e) _o->build = _e->str(); }
}

inline ::flatbuffers::Offset<Authentication> Authentication::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AuthenticationT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAuthentication(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Authentication> CreateAuthentication(::flatbuffers::FlatBufferBuilder &_fbb, const AuthenticationT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AuthenticationT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _token = _o->token.empty() ? 0 : _fbb.CreateString(_o->token);
  auto _build = _o->build.empty() ? 0 : _fbb.CreateString(_o->build);
  return CreateAuthentication(
      _fbb,
      _token,
      _build);
}

inline const ::flatbuffers::TypeTable *AuthenticationTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "token",
    "build"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_AUTHENTICATION_H_
