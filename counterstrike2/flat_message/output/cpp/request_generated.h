// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUEST_H_
#define FLATBUFFERS_GENERATED_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Request;
struct RequestBuilder;
struct RequestT;

bool operator==(const RequestT &lhs, const RequestT &rhs);
bool operator!=(const RequestT &lhs, const RequestT &rhs);

inline const ::flatbuffers::TypeTable *RequestTypeTable();

struct RequestT : public ::flatbuffers::NativeTable {
  typedef Request TableType;
  uint64_t type = 0;
  int32_t game = 0;
  std::vector<int8_t> data{};
};

struct Request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestT NativeTableType;
  typedef RequestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return RequestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_GAME = 6,
    VT_DATA = 8
  };
  uint64_t type() const {
    return GetField<uint64_t>(VT_TYPE, 0);
  }
  bool mutate_type(uint64_t _type = 0) {
    return SetField<uint64_t>(VT_TYPE, _type, 0);
  }
  int32_t game() const {
    return GetField<int32_t>(VT_GAME, 0);
  }
  bool mutate_game(int32_t _game = 0) {
    return SetField<int32_t>(VT_GAME, _game, 0);
  }
  const ::flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<int8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TYPE, 8) &&
           VerifyField<int32_t>(verifier, VT_GAME, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  RequestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Request> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RequestBuilder {
  typedef Request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(uint64_t type) {
    fbb_.AddElement<uint64_t>(Request::VT_TYPE, type, 0);
  }
  void add_game(int32_t game) {
    fbb_.AddElement<int32_t>(Request::VT_GAME, game, 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Request::VT_DATA, data);
  }
  explicit RequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Request> CreateRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t type = 0,
    int32_t game = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> data = 0) {
  RequestBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_data(data);
  builder_.add_game(game);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Request> CreateRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t type = 0,
    int32_t game = 0,
    const std::vector<int8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  return CreateRequest(
      _fbb,
      type,
      game,
      data__);
}

::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const RequestT &lhs, const RequestT &rhs) {
  return
      (lhs.type == rhs.type) &&
      (lhs.game == rhs.game) &&
      (lhs.data == rhs.data);
}

inline bool operator!=(const RequestT &lhs, const RequestT &rhs) {
    return !(lhs == rhs);
}


inline RequestT *Request::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RequestT>(new RequestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Request::UnPackTo(RequestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = game(); _o->game = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
}

inline ::flatbuffers::Offset<Request> Request::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Request> CreateRequest(::flatbuffers::FlatBufferBuilder &_fbb, const RequestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RequestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _game = _o->game;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return CreateRequest(
      _fbb,
      _type,
      _game,
      _data);
}

inline const ::flatbuffers::TypeTable *RequestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_CHAR, 1, -1 }
  };
  static const char * const names[] = {
    "type",
    "game",
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_REQUEST_H_
