// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MISCTABLE_H_
#define FLATBUFFERS_GENERATED_MISCTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct misc;
struct miscBuilder;
struct miscT;

bool operator==(const miscT &lhs, const miscT &rhs);
bool operator!=(const miscT &lhs, const miscT &rhs);

inline const ::flatbuffers::TypeTable *miscTypeTable();

struct miscT : public ::flatbuffers::NativeTable {
  typedef misc TableType;
  bool autopeek = false;
  bool duck_assist = false;
  bool slowwalk = false;
  bool bunnyhop = false;
  bool auto_strafe = false;
  bool misc_onshot_capsule = false;
  bool misc_dark_mode = false;
  bool disable_light = false;
  bool penetration_crosshair = false;
  bool force_crosshair = false;
  bool blur = false;
  int32_t world_changer = 0;
  uint32_t grenade_trail_color = 0;
  bool thirdperson = false;
  int32_t thirdperson_amount = 0;
  bool smoke_remove = false;
  bool server_impact = false;
  bool client_impact = false;
  bool bullet_trace = false;
  uint32_t bullet_trace_color = 0;
  bool bullet_trace_enemy = false;
  uint32_t bullet_trace_enemy_color = 0;
  bool grenade_trail = false;
  bool keybind = false;
  std::vector<float> keybind_position{};
  bool spectators = false;
  std::vector<float> spectators_position{};
  std::vector<float> rapid_position{};
  bool watermark = false;
  bool misc_viewmodel_changer = false;
  int32_t misc_viewmodel_x = 0;
  int32_t misc_viewmodel_y = 0;
  int32_t misc_viewmodel_z = 0;
  int32_t misc_fov = 0;
  bool misc_remove_scope = false;
  bool misc_norecoil = false;
  bool misc_remove_post_processing = false;
  bool misc_remove_legs = false;
  bool misc_remove_grenade_crosshair = false;
  bool misc_unlock_inventory = false;
  bool misc_remove_bob = false;
  bool misc_buybot = false;
  int32_t misc_buybot_primary = 0;
  int32_t misc_buybot_secondary = 0;
  bool misc_buybot_zeus = false;
  bool misc_buybot_armor = false;
  bool misc_buybot_grenades = false;
  bool misc_grenade_prediction = false;
  bool misc_preserve_killfeed = false;
  bool misc_esp_oof = false;
  uint32_t misc_esp_oof_color = 0;
  bool misc_hitsound = false;
  bool misc_hitmarker = false;
};

struct misc FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef miscT NativeTableType;
  typedef miscBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return miscTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AUTOPEEK = 4,
    VT_DUCK_ASSIST = 6,
    VT_SLOWWALK = 8,
    VT_BUNNYHOP = 10,
    VT_AUTO_STRAFE = 12,
    VT_MISC_ONSHOT_CAPSULE = 14,
    VT_MISC_DARK_MODE = 16,
    VT_DISABLE_LIGHT = 18,
    VT_PENETRATION_CROSSHAIR = 20,
    VT_FORCE_CROSSHAIR = 22,
    VT_BLUR = 24,
    VT_WORLD_CHANGER = 26,
    VT_GRENADE_TRAIL_COLOR = 28,
    VT_THIRDPERSON = 30,
    VT_THIRDPERSON_AMOUNT = 32,
    VT_SMOKE_REMOVE = 34,
    VT_SERVER_IMPACT = 36,
    VT_CLIENT_IMPACT = 38,
    VT_BULLET_TRACE = 40,
    VT_BULLET_TRACE_COLOR = 42,
    VT_BULLET_TRACE_ENEMY = 44,
    VT_BULLET_TRACE_ENEMY_COLOR = 46,
    VT_GRENADE_TRAIL = 48,
    VT_KEYBIND = 50,
    VT_KEYBIND_POSITION = 52,
    VT_SPECTATORS = 54,
    VT_SPECTATORS_POSITION = 56,
    VT_RAPID_POSITION = 58,
    VT_WATERMARK = 60,
    VT_MISC_VIEWMODEL_CHANGER = 62,
    VT_MISC_VIEWMODEL_X = 64,
    VT_MISC_VIEWMODEL_Y = 66,
    VT_MISC_VIEWMODEL_Z = 68,
    VT_MISC_FOV = 70,
    VT_MISC_REMOVE_SCOPE = 72,
    VT_MISC_NORECOIL = 74,
    VT_MISC_REMOVE_POST_PROCESSING = 76,
    VT_MISC_REMOVE_LEGS = 78,
    VT_MISC_REMOVE_GRENADE_CROSSHAIR = 80,
    VT_MISC_UNLOCK_INVENTORY = 82,
    VT_MISC_REMOVE_BOB = 84,
    VT_MISC_BUYBOT = 86,
    VT_MISC_BUYBOT_PRIMARY = 88,
    VT_MISC_BUYBOT_SECONDARY = 90,
    VT_MISC_BUYBOT_ZEUS = 92,
    VT_MISC_BUYBOT_ARMOR = 94,
    VT_MISC_BUYBOT_GRENADES = 96,
    VT_MISC_GRENADE_PREDICTION = 98,
    VT_MISC_PRESERVE_KILLFEED = 100,
    VT_MISC_ESP_OOF = 102,
    VT_MISC_ESP_OOF_COLOR = 104,
    VT_MISC_HITSOUND = 106,
    VT_MISC_HITMARKER = 108
  };
  bool autopeek() const {
    return GetField<uint8_t>(VT_AUTOPEEK, 0) != 0;
  }
  bool mutate_autopeek(bool _autopeek = 0) {
    return SetField<uint8_t>(VT_AUTOPEEK, static_cast<uint8_t>(_autopeek), 0);
  }
  bool duck_assist() const {
    return GetField<uint8_t>(VT_DUCK_ASSIST, 0) != 0;
  }
  bool mutate_duck_assist(bool _duck_assist = 0) {
    return SetField<uint8_t>(VT_DUCK_ASSIST, static_cast<uint8_t>(_duck_assist), 0);
  }
  bool slowwalk() const {
    return GetField<uint8_t>(VT_SLOWWALK, 0) != 0;
  }
  bool mutate_slowwalk(bool _slowwalk = 0) {
    return SetField<uint8_t>(VT_SLOWWALK, static_cast<uint8_t>(_slowwalk), 0);
  }
  bool bunnyhop() const {
    return GetField<uint8_t>(VT_BUNNYHOP, 0) != 0;
  }
  bool mutate_bunnyhop(bool _bunnyhop = 0) {
    return SetField<uint8_t>(VT_BUNNYHOP, static_cast<uint8_t>(_bunnyhop), 0);
  }
  bool auto_strafe() const {
    return GetField<uint8_t>(VT_AUTO_STRAFE, 0) != 0;
  }
  bool mutate_auto_strafe(bool _auto_strafe = 0) {
    return SetField<uint8_t>(VT_AUTO_STRAFE, static_cast<uint8_t>(_auto_strafe), 0);
  }
  bool misc_onshot_capsule() const {
    return GetField<uint8_t>(VT_MISC_ONSHOT_CAPSULE, 0) != 0;
  }
  bool mutate_misc_onshot_capsule(bool _misc_onshot_capsule = 0) {
    return SetField<uint8_t>(VT_MISC_ONSHOT_CAPSULE, static_cast<uint8_t>(_misc_onshot_capsule), 0);
  }
  bool misc_dark_mode() const {
    return GetField<uint8_t>(VT_MISC_DARK_MODE, 0) != 0;
  }
  bool mutate_misc_dark_mode(bool _misc_dark_mode = 0) {
    return SetField<uint8_t>(VT_MISC_DARK_MODE, static_cast<uint8_t>(_misc_dark_mode), 0);
  }
  bool disable_light() const {
    return GetField<uint8_t>(VT_DISABLE_LIGHT, 0) != 0;
  }
  bool mutate_disable_light(bool _disable_light = 0) {
    return SetField<uint8_t>(VT_DISABLE_LIGHT, static_cast<uint8_t>(_disable_light), 0);
  }
  bool penetration_crosshair() const {
    return GetField<uint8_t>(VT_PENETRATION_CROSSHAIR, 0) != 0;
  }
  bool mutate_penetration_crosshair(bool _penetration_crosshair = 0) {
    return SetField<uint8_t>(VT_PENETRATION_CROSSHAIR, static_cast<uint8_t>(_penetration_crosshair), 0);
  }
  bool force_crosshair() const {
    return GetField<uint8_t>(VT_FORCE_CROSSHAIR, 0) != 0;
  }
  bool mutate_force_crosshair(bool _force_crosshair = 0) {
    return SetField<uint8_t>(VT_FORCE_CROSSHAIR, static_cast<uint8_t>(_force_crosshair), 0);
  }
  bool blur() const {
    return GetField<uint8_t>(VT_BLUR, 0) != 0;
  }
  bool mutate_blur(bool _blur = 0) {
    return SetField<uint8_t>(VT_BLUR, static_cast<uint8_t>(_blur), 0);
  }
  int32_t world_changer() const {
    return GetField<int32_t>(VT_WORLD_CHANGER, 0);
  }
  bool mutate_world_changer(int32_t _world_changer = 0) {
    return SetField<int32_t>(VT_WORLD_CHANGER, _world_changer, 0);
  }
  uint32_t grenade_trail_color() const {
    return GetField<uint32_t>(VT_GRENADE_TRAIL_COLOR, 0);
  }
  bool mutate_grenade_trail_color(uint32_t _grenade_trail_color = 0) {
    return SetField<uint32_t>(VT_GRENADE_TRAIL_COLOR, _grenade_trail_color, 0);
  }
  bool thirdperson() const {
    return GetField<uint8_t>(VT_THIRDPERSON, 0) != 0;
  }
  bool mutate_thirdperson(bool _thirdperson = 0) {
    return SetField<uint8_t>(VT_THIRDPERSON, static_cast<uint8_t>(_thirdperson), 0);
  }
  int32_t thirdperson_amount() const {
    return GetField<int32_t>(VT_THIRDPERSON_AMOUNT, 0);
  }
  bool mutate_thirdperson_amount(int32_t _thirdperson_amount = 0) {
    return SetField<int32_t>(VT_THIRDPERSON_AMOUNT, _thirdperson_amount, 0);
  }
  bool smoke_remove() const {
    return GetField<uint8_t>(VT_SMOKE_REMOVE, 0) != 0;
  }
  bool mutate_smoke_remove(bool _smoke_remove = 0) {
    return SetField<uint8_t>(VT_SMOKE_REMOVE, static_cast<uint8_t>(_smoke_remove), 0);
  }
  bool server_impact() const {
    return GetField<uint8_t>(VT_SERVER_IMPACT, 0) != 0;
  }
  bool mutate_server_impact(bool _server_impact = 0) {
    return SetField<uint8_t>(VT_SERVER_IMPACT, static_cast<uint8_t>(_server_impact), 0);
  }
  bool client_impact() const {
    return GetField<uint8_t>(VT_CLIENT_IMPACT, 0) != 0;
  }
  bool mutate_client_impact(bool _client_impact = 0) {
    return SetField<uint8_t>(VT_CLIENT_IMPACT, static_cast<uint8_t>(_client_impact), 0);
  }
  bool bullet_trace() const {
    return GetField<uint8_t>(VT_BULLET_TRACE, 0) != 0;
  }
  bool mutate_bullet_trace(bool _bullet_trace = 0) {
    return SetField<uint8_t>(VT_BULLET_TRACE, static_cast<uint8_t>(_bullet_trace), 0);
  }
  uint32_t bullet_trace_color() const {
    return GetField<uint32_t>(VT_BULLET_TRACE_COLOR, 0);
  }
  bool mutate_bullet_trace_color(uint32_t _bullet_trace_color = 0) {
    return SetField<uint32_t>(VT_BULLET_TRACE_COLOR, _bullet_trace_color, 0);
  }
  bool bullet_trace_enemy() const {
    return GetField<uint8_t>(VT_BULLET_TRACE_ENEMY, 0) != 0;
  }
  bool mutate_bullet_trace_enemy(bool _bullet_trace_enemy = 0) {
    return SetField<uint8_t>(VT_BULLET_TRACE_ENEMY, static_cast<uint8_t>(_bullet_trace_enemy), 0);
  }
  uint32_t bullet_trace_enemy_color() const {
    return GetField<uint32_t>(VT_BULLET_TRACE_ENEMY_COLOR, 0);
  }
  bool mutate_bullet_trace_enemy_color(uint32_t _bullet_trace_enemy_color = 0) {
    return SetField<uint32_t>(VT_BULLET_TRACE_ENEMY_COLOR, _bullet_trace_enemy_color, 0);
  }
  bool grenade_trail() const {
    return GetField<uint8_t>(VT_GRENADE_TRAIL, 0) != 0;
  }
  bool mutate_grenade_trail(bool _grenade_trail = 0) {
    return SetField<uint8_t>(VT_GRENADE_TRAIL, static_cast<uint8_t>(_grenade_trail), 0);
  }
  bool keybind() const {
    return GetField<uint8_t>(VT_KEYBIND, 0) != 0;
  }
  bool mutate_keybind(bool _keybind = 0) {
    return SetField<uint8_t>(VT_KEYBIND, static_cast<uint8_t>(_keybind), 0);
  }
  const ::flatbuffers::Vector<float> *keybind_position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_KEYBIND_POSITION);
  }
  ::flatbuffers::Vector<float> *mutable_keybind_position() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_KEYBIND_POSITION);
  }
  bool spectators() const {
    return GetField<uint8_t>(VT_SPECTATORS, 0) != 0;
  }
  bool mutate_spectators(bool _spectators = 0) {
    return SetField<uint8_t>(VT_SPECTATORS, static_cast<uint8_t>(_spectators), 0);
  }
  const ::flatbuffers::Vector<float> *spectators_position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_SPECTATORS_POSITION);
  }
  ::flatbuffers::Vector<float> *mutable_spectators_position() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_SPECTATORS_POSITION);
  }
  const ::flatbuffers::Vector<float> *rapid_position() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_RAPID_POSITION);
  }
  ::flatbuffers::Vector<float> *mutable_rapid_position() {
    return GetPointer<::flatbuffers::Vector<float> *>(VT_RAPID_POSITION);
  }
  bool watermark() const {
    return GetField<uint8_t>(VT_WATERMARK, 0) != 0;
  }
  bool mutate_watermark(bool _watermark = 0) {
    return SetField<uint8_t>(VT_WATERMARK, static_cast<uint8_t>(_watermark), 0);
  }
  bool misc_viewmodel_changer() const {
    return GetField<uint8_t>(VT_MISC_VIEWMODEL_CHANGER, 0) != 0;
  }
  bool mutate_misc_viewmodel_changer(bool _misc_viewmodel_changer = 0) {
    return SetField<uint8_t>(VT_MISC_VIEWMODEL_CHANGER, static_cast<uint8_t>(_misc_viewmodel_changer), 0);
  }
  int32_t misc_viewmodel_x() const {
    return GetField<int32_t>(VT_MISC_VIEWMODEL_X, 0);
  }
  bool mutate_misc_viewmodel_x(int32_t _misc_viewmodel_x = 0) {
    return SetField<int32_t>(VT_MISC_VIEWMODEL_X, _misc_viewmodel_x, 0);
  }
  int32_t misc_viewmodel_y() const {
    return GetField<int32_t>(VT_MISC_VIEWMODEL_Y, 0);
  }
  bool mutate_misc_viewmodel_y(int32_t _misc_viewmodel_y = 0) {
    return SetField<int32_t>(VT_MISC_VIEWMODEL_Y, _misc_viewmodel_y, 0);
  }
  int32_t misc_viewmodel_z() const {
    return GetField<int32_t>(VT_MISC_VIEWMODEL_Z, 0);
  }
  bool mutate_misc_viewmodel_z(int32_t _misc_viewmodel_z = 0) {
    return SetField<int32_t>(VT_MISC_VIEWMODEL_Z, _misc_viewmodel_z, 0);
  }
  int32_t misc_fov() const {
    return GetField<int32_t>(VT_MISC_FOV, 0);
  }
  bool mutate_misc_fov(int32_t _misc_fov = 0) {
    return SetField<int32_t>(VT_MISC_FOV, _misc_fov, 0);
  }
  bool misc_remove_scope() const {
    return GetField<uint8_t>(VT_MISC_REMOVE_SCOPE, 0) != 0;
  }
  bool mutate_misc_remove_scope(bool _misc_remove_scope = 0) {
    return SetField<uint8_t>(VT_MISC_REMOVE_SCOPE, static_cast<uint8_t>(_misc_remove_scope), 0);
  }
  bool misc_norecoil() const {
    return GetField<uint8_t>(VT_MISC_NORECOIL, 0) != 0;
  }
  bool mutate_misc_norecoil(bool _misc_norecoil = 0) {
    return SetField<uint8_t>(VT_MISC_NORECOIL, static_cast<uint8_t>(_misc_norecoil), 0);
  }
  bool misc_remove_post_processing() const {
    return GetField<uint8_t>(VT_MISC_REMOVE_POST_PROCESSING, 0) != 0;
  }
  bool mutate_misc_remove_post_processing(bool _misc_remove_post_processing = 0) {
    return SetField<uint8_t>(VT_MISC_REMOVE_POST_PROCESSING, static_cast<uint8_t>(_misc_remove_post_processing), 0);
  }
  bool misc_remove_legs() const {
    return GetField<uint8_t>(VT_MISC_REMOVE_LEGS, 0) != 0;
  }
  bool mutate_misc_remove_legs(bool _misc_remove_legs = 0) {
    return SetField<uint8_t>(VT_MISC_REMOVE_LEGS, static_cast<uint8_t>(_misc_remove_legs), 0);
  }
  bool misc_remove_grenade_crosshair() const {
    return GetField<uint8_t>(VT_MISC_REMOVE_GRENADE_CROSSHAIR, 0) != 0;
  }
  bool mutate_misc_remove_grenade_crosshair(bool _misc_remove_grenade_crosshair = 0) {
    return SetField<uint8_t>(VT_MISC_REMOVE_GRENADE_CROSSHAIR, static_cast<uint8_t>(_misc_remove_grenade_crosshair), 0);
  }
  bool misc_unlock_inventory() const {
    return GetField<uint8_t>(VT_MISC_UNLOCK_INVENTORY, 0) != 0;
  }
  bool mutate_misc_unlock_inventory(bool _misc_unlock_inventory = 0) {
    return SetField<uint8_t>(VT_MISC_UNLOCK_INVENTORY, static_cast<uint8_t>(_misc_unlock_inventory), 0);
  }
  bool misc_remove_bob() const {
    return GetField<uint8_t>(VT_MISC_REMOVE_BOB, 0) != 0;
  }
  bool mutate_misc_remove_bob(bool _misc_remove_bob = 0) {
    return SetField<uint8_t>(VT_MISC_REMOVE_BOB, static_cast<uint8_t>(_misc_remove_bob), 0);
  }
  bool misc_buybot() const {
    return GetField<uint8_t>(VT_MISC_BUYBOT, 0) != 0;
  }
  bool mutate_misc_buybot(bool _misc_buybot = 0) {
    return SetField<uint8_t>(VT_MISC_BUYBOT, static_cast<uint8_t>(_misc_buybot), 0);
  }
  int32_t misc_buybot_primary() const {
    return GetField<int32_t>(VT_MISC_BUYBOT_PRIMARY, 0);
  }
  bool mutate_misc_buybot_primary(int32_t _misc_buybot_primary = 0) {
    return SetField<int32_t>(VT_MISC_BUYBOT_PRIMARY, _misc_buybot_primary, 0);
  }
  int32_t misc_buybot_secondary() const {
    return GetField<int32_t>(VT_MISC_BUYBOT_SECONDARY, 0);
  }
  bool mutate_misc_buybot_secondary(int32_t _misc_buybot_secondary = 0) {
    return SetField<int32_t>(VT_MISC_BUYBOT_SECONDARY, _misc_buybot_secondary, 0);
  }
  bool misc_buybot_zeus() const {
    return GetField<uint8_t>(VT_MISC_BUYBOT_ZEUS, 0) != 0;
  }
  bool mutate_misc_buybot_zeus(bool _misc_buybot_zeus = 0) {
    return SetField<uint8_t>(VT_MISC_BUYBOT_ZEUS, static_cast<uint8_t>(_misc_buybot_zeus), 0);
  }
  bool misc_buybot_armor() const {
    return GetField<uint8_t>(VT_MISC_BUYBOT_ARMOR, 0) != 0;
  }
  bool mutate_misc_buybot_armor(bool _misc_buybot_armor = 0) {
    return SetField<uint8_t>(VT_MISC_BUYBOT_ARMOR, static_cast<uint8_t>(_misc_buybot_armor), 0);
  }
  bool misc_buybot_grenades() const {
    return GetField<uint8_t>(VT_MISC_BUYBOT_GRENADES, 0) != 0;
  }
  bool mutate_misc_buybot_grenades(bool _misc_buybot_grenades = 0) {
    return SetField<uint8_t>(VT_MISC_BUYBOT_GRENADES, static_cast<uint8_t>(_misc_buybot_grenades), 0);
  }
  bool misc_grenade_prediction() const {
    return GetField<uint8_t>(VT_MISC_GRENADE_PREDICTION, 0) != 0;
  }
  bool mutate_misc_grenade_prediction(bool _misc_grenade_prediction = 0) {
    return SetField<uint8_t>(VT_MISC_GRENADE_PREDICTION, static_cast<uint8_t>(_misc_grenade_prediction), 0);
  }
  bool misc_preserve_killfeed() const {
    return GetField<uint8_t>(VT_MISC_PRESERVE_KILLFEED, 0) != 0;
  }
  bool mutate_misc_preserve_killfeed(bool _misc_preserve_killfeed = 0) {
    return SetField<uint8_t>(VT_MISC_PRESERVE_KILLFEED, static_cast<uint8_t>(_misc_preserve_killfeed), 0);
  }
  bool misc_esp_oof() const {
    return GetField<uint8_t>(VT_MISC_ESP_OOF, 0) != 0;
  }
  bool mutate_misc_esp_oof(bool _misc_esp_oof = 0) {
    return SetField<uint8_t>(VT_MISC_ESP_OOF, static_cast<uint8_t>(_misc_esp_oof), 0);
  }
  uint32_t misc_esp_oof_color() const {
    return GetField<uint32_t>(VT_MISC_ESP_OOF_COLOR, 0);
  }
  bool mutate_misc_esp_oof_color(uint32_t _misc_esp_oof_color = 0) {
    return SetField<uint32_t>(VT_MISC_ESP_OOF_COLOR, _misc_esp_oof_color, 0);
  }
  bool misc_hitsound() const {
    return GetField<uint8_t>(VT_MISC_HITSOUND, 0) != 0;
  }
  bool mutate_misc_hitsound(bool _misc_hitsound = 0) {
    return SetField<uint8_t>(VT_MISC_HITSOUND, static_cast<uint8_t>(_misc_hitsound), 0);
  }
  bool misc_hitmarker() const {
    return GetField<uint8_t>(VT_MISC_HITMARKER, 0) != 0;
  }
  bool mutate_misc_hitmarker(bool _misc_hitmarker = 0) {
    return SetField<uint8_t>(VT_MISC_HITMARKER, static_cast<uint8_t>(_misc_hitmarker), 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_AUTOPEEK, 1) &&
           VerifyField<uint8_t>(verifier, VT_DUCK_ASSIST, 1) &&
           VerifyField<uint8_t>(verifier, VT_SLOWWALK, 1) &&
           VerifyField<uint8_t>(verifier, VT_BUNNYHOP, 1) &&
           VerifyField<uint8_t>(verifier, VT_AUTO_STRAFE, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_ONSHOT_CAPSULE, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_DARK_MODE, 1) &&
           VerifyField<uint8_t>(verifier, VT_DISABLE_LIGHT, 1) &&
           VerifyField<uint8_t>(verifier, VT_PENETRATION_CROSSHAIR, 1) &&
           VerifyField<uint8_t>(verifier, VT_FORCE_CROSSHAIR, 1) &&
           VerifyField<uint8_t>(verifier, VT_BLUR, 1) &&
           VerifyField<int32_t>(verifier, VT_WORLD_CHANGER, 4) &&
           VerifyField<uint32_t>(verifier, VT_GRENADE_TRAIL_COLOR, 4) &&
           VerifyField<uint8_t>(verifier, VT_THIRDPERSON, 1) &&
           VerifyField<int32_t>(verifier, VT_THIRDPERSON_AMOUNT, 4) &&
           VerifyField<uint8_t>(verifier, VT_SMOKE_REMOVE, 1) &&
           VerifyField<uint8_t>(verifier, VT_SERVER_IMPACT, 1) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT_IMPACT, 1) &&
           VerifyField<uint8_t>(verifier, VT_BULLET_TRACE, 1) &&
           VerifyField<uint32_t>(verifier, VT_BULLET_TRACE_COLOR, 4) &&
           VerifyField<uint8_t>(verifier, VT_BULLET_TRACE_ENEMY, 1) &&
           VerifyField<uint32_t>(verifier, VT_BULLET_TRACE_ENEMY_COLOR, 4) &&
           VerifyField<uint8_t>(verifier, VT_GRENADE_TRAIL, 1) &&
           VerifyField<uint8_t>(verifier, VT_KEYBIND, 1) &&
           VerifyOffset(verifier, VT_KEYBIND_POSITION) &&
           verifier.VerifyVector(keybind_position()) &&
           VerifyField<uint8_t>(verifier, VT_SPECTATORS, 1) &&
           VerifyOffset(verifier, VT_SPECTATORS_POSITION) &&
           verifier.VerifyVector(spectators_position()) &&
           VerifyOffset(verifier, VT_RAPID_POSITION) &&
           verifier.VerifyVector(rapid_position()) &&
           VerifyField<uint8_t>(verifier, VT_WATERMARK, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_VIEWMODEL_CHANGER, 1) &&
           VerifyField<int32_t>(verifier, VT_MISC_VIEWMODEL_X, 4) &&
           VerifyField<int32_t>(verifier, VT_MISC_VIEWMODEL_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_MISC_VIEWMODEL_Z, 4) &&
           VerifyField<int32_t>(verifier, VT_MISC_FOV, 4) &&
           VerifyField<uint8_t>(verifier, VT_MISC_REMOVE_SCOPE, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_NORECOIL, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_REMOVE_POST_PROCESSING, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_REMOVE_LEGS, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_REMOVE_GRENADE_CROSSHAIR, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_UNLOCK_INVENTORY, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_REMOVE_BOB, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_BUYBOT, 1) &&
           VerifyField<int32_t>(verifier, VT_MISC_BUYBOT_PRIMARY, 4) &&
           VerifyField<int32_t>(verifier, VT_MISC_BUYBOT_SECONDARY, 4) &&
           VerifyField<uint8_t>(verifier, VT_MISC_BUYBOT_ZEUS, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_BUYBOT_ARMOR, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_BUYBOT_GRENADES, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_GRENADE_PREDICTION, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_PRESERVE_KILLFEED, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_ESP_OOF, 1) &&
           VerifyField<uint32_t>(verifier, VT_MISC_ESP_OOF_COLOR, 4) &&
           VerifyField<uint8_t>(verifier, VT_MISC_HITSOUND, 1) &&
           VerifyField<uint8_t>(verifier, VT_MISC_HITMARKER, 1) &&
           verifier.EndTable();
  }
  miscT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(miscT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<misc> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const miscT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct miscBuilder {
  typedef misc Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_autopeek(bool autopeek) {
    fbb_.AddElement<uint8_t>(misc::VT_AUTOPEEK, static_cast<uint8_t>(autopeek), 0);
  }
  void add_duck_assist(bool duck_assist) {
    fbb_.AddElement<uint8_t>(misc::VT_DUCK_ASSIST, static_cast<uint8_t>(duck_assist), 0);
  }
  void add_slowwalk(bool slowwalk) {
    fbb_.AddElement<uint8_t>(misc::VT_SLOWWALK, static_cast<uint8_t>(slowwalk), 0);
  }
  void add_bunnyhop(bool bunnyhop) {
    fbb_.AddElement<uint8_t>(misc::VT_BUNNYHOP, static_cast<uint8_t>(bunnyhop), 0);
  }
  void add_auto_strafe(bool auto_strafe) {
    fbb_.AddElement<uint8_t>(misc::VT_AUTO_STRAFE, static_cast<uint8_t>(auto_strafe), 0);
  }
  void add_misc_onshot_capsule(bool misc_onshot_capsule) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_ONSHOT_CAPSULE, static_cast<uint8_t>(misc_onshot_capsule), 0);
  }
  void add_misc_dark_mode(bool misc_dark_mode) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_DARK_MODE, static_cast<uint8_t>(misc_dark_mode), 0);
  }
  void add_disable_light(bool disable_light) {
    fbb_.AddElement<uint8_t>(misc::VT_DISABLE_LIGHT, static_cast<uint8_t>(disable_light), 0);
  }
  void add_penetration_crosshair(bool penetration_crosshair) {
    fbb_.AddElement<uint8_t>(misc::VT_PENETRATION_CROSSHAIR, static_cast<uint8_t>(penetration_crosshair), 0);
  }
  void add_force_crosshair(bool force_crosshair) {
    fbb_.AddElement<uint8_t>(misc::VT_FORCE_CROSSHAIR, static_cast<uint8_t>(force_crosshair), 0);
  }
  void add_blur(bool blur) {
    fbb_.AddElement<uint8_t>(misc::VT_BLUR, static_cast<uint8_t>(blur), 0);
  }
  void add_world_changer(int32_t world_changer) {
    fbb_.AddElement<int32_t>(misc::VT_WORLD_CHANGER, world_changer, 0);
  }
  void add_grenade_trail_color(uint32_t grenade_trail_color) {
    fbb_.AddElement<uint32_t>(misc::VT_GRENADE_TRAIL_COLOR, grenade_trail_color, 0);
  }
  void add_thirdperson(bool thirdperson) {
    fbb_.AddElement<uint8_t>(misc::VT_THIRDPERSON, static_cast<uint8_t>(thirdperson), 0);
  }
  void add_thirdperson_amount(int32_t thirdperson_amount) {
    fbb_.AddElement<int32_t>(misc::VT_THIRDPERSON_AMOUNT, thirdperson_amount, 0);
  }
  void add_smoke_remove(bool smoke_remove) {
    fbb_.AddElement<uint8_t>(misc::VT_SMOKE_REMOVE, static_cast<uint8_t>(smoke_remove), 0);
  }
  void add_server_impact(bool server_impact) {
    fbb_.AddElement<uint8_t>(misc::VT_SERVER_IMPACT, static_cast<uint8_t>(server_impact), 0);
  }
  void add_client_impact(bool client_impact) {
    fbb_.AddElement<uint8_t>(misc::VT_CLIENT_IMPACT, static_cast<uint8_t>(client_impact), 0);
  }
  void add_bullet_trace(bool bullet_trace) {
    fbb_.AddElement<uint8_t>(misc::VT_BULLET_TRACE, static_cast<uint8_t>(bullet_trace), 0);
  }
  void add_bullet_trace_color(uint32_t bullet_trace_color) {
    fbb_.AddElement<uint32_t>(misc::VT_BULLET_TRACE_COLOR, bullet_trace_color, 0);
  }
  void add_bullet_trace_enemy(bool bullet_trace_enemy) {
    fbb_.AddElement<uint8_t>(misc::VT_BULLET_TRACE_ENEMY, static_cast<uint8_t>(bullet_trace_enemy), 0);
  }
  void add_bullet_trace_enemy_color(uint32_t bullet_trace_enemy_color) {
    fbb_.AddElement<uint32_t>(misc::VT_BULLET_TRACE_ENEMY_COLOR, bullet_trace_enemy_color, 0);
  }
  void add_grenade_trail(bool grenade_trail) {
    fbb_.AddElement<uint8_t>(misc::VT_GRENADE_TRAIL, static_cast<uint8_t>(grenade_trail), 0);
  }
  void add_keybind(bool keybind) {
    fbb_.AddElement<uint8_t>(misc::VT_KEYBIND, static_cast<uint8_t>(keybind), 0);
  }
  void add_keybind_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> keybind_position) {
    fbb_.AddOffset(misc::VT_KEYBIND_POSITION, keybind_position);
  }
  void add_spectators(bool spectators) {
    fbb_.AddElement<uint8_t>(misc::VT_SPECTATORS, static_cast<uint8_t>(spectators), 0);
  }
  void add_spectators_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> spectators_position) {
    fbb_.AddOffset(misc::VT_SPECTATORS_POSITION, spectators_position);
  }
  void add_rapid_position(::flatbuffers::Offset<::flatbuffers::Vector<float>> rapid_position) {
    fbb_.AddOffset(misc::VT_RAPID_POSITION, rapid_position);
  }
  void add_watermark(bool watermark) {
    fbb_.AddElement<uint8_t>(misc::VT_WATERMARK, static_cast<uint8_t>(watermark), 0);
  }
  void add_misc_viewmodel_changer(bool misc_viewmodel_changer) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_VIEWMODEL_CHANGER, static_cast<uint8_t>(misc_viewmodel_changer), 0);
  }
  void add_misc_viewmodel_x(int32_t misc_viewmodel_x) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_VIEWMODEL_X, misc_viewmodel_x, 0);
  }
  void add_misc_viewmodel_y(int32_t misc_viewmodel_y) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_VIEWMODEL_Y, misc_viewmodel_y, 0);
  }
  void add_misc_viewmodel_z(int32_t misc_viewmodel_z) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_VIEWMODEL_Z, misc_viewmodel_z, 0);
  }
  void add_misc_fov(int32_t misc_fov) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_FOV, misc_fov, 0);
  }
  void add_misc_remove_scope(bool misc_remove_scope) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_REMOVE_SCOPE, static_cast<uint8_t>(misc_remove_scope), 0);
  }
  void add_misc_norecoil(bool misc_norecoil) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_NORECOIL, static_cast<uint8_t>(misc_norecoil), 0);
  }
  void add_misc_remove_post_processing(bool misc_remove_post_processing) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_REMOVE_POST_PROCESSING, static_cast<uint8_t>(misc_remove_post_processing), 0);
  }
  void add_misc_remove_legs(bool misc_remove_legs) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_REMOVE_LEGS, static_cast<uint8_t>(misc_remove_legs), 0);
  }
  void add_misc_remove_grenade_crosshair(bool misc_remove_grenade_crosshair) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_REMOVE_GRENADE_CROSSHAIR, static_cast<uint8_t>(misc_remove_grenade_crosshair), 0);
  }
  void add_misc_unlock_inventory(bool misc_unlock_inventory) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_UNLOCK_INVENTORY, static_cast<uint8_t>(misc_unlock_inventory), 0);
  }
  void add_misc_remove_bob(bool misc_remove_bob) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_REMOVE_BOB, static_cast<uint8_t>(misc_remove_bob), 0);
  }
  void add_misc_buybot(bool misc_buybot) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_BUYBOT, static_cast<uint8_t>(misc_buybot), 0);
  }
  void add_misc_buybot_primary(int32_t misc_buybot_primary) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_BUYBOT_PRIMARY, misc_buybot_primary, 0);
  }
  void add_misc_buybot_secondary(int32_t misc_buybot_secondary) {
    fbb_.AddElement<int32_t>(misc::VT_MISC_BUYBOT_SECONDARY, misc_buybot_secondary, 0);
  }
  void add_misc_buybot_zeus(bool misc_buybot_zeus) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_BUYBOT_ZEUS, static_cast<uint8_t>(misc_buybot_zeus), 0);
  }
  void add_misc_buybot_armor(bool misc_buybot_armor) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_BUYBOT_ARMOR, static_cast<uint8_t>(misc_buybot_armor), 0);
  }
  void add_misc_buybot_grenades(bool misc_buybot_grenades) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_BUYBOT_GRENADES, static_cast<uint8_t>(misc_buybot_grenades), 0);
  }
  void add_misc_grenade_prediction(bool misc_grenade_prediction) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_GRENADE_PREDICTION, static_cast<uint8_t>(misc_grenade_prediction), 0);
  }
  void add_misc_preserve_killfeed(bool misc_preserve_killfeed) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_PRESERVE_KILLFEED, static_cast<uint8_t>(misc_preserve_killfeed), 0);
  }
  void add_misc_esp_oof(bool misc_esp_oof) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_ESP_OOF, static_cast<uint8_t>(misc_esp_oof), 0);
  }
  void add_misc_esp_oof_color(uint32_t misc_esp_oof_color) {
    fbb_.AddElement<uint32_t>(misc::VT_MISC_ESP_OOF_COLOR, misc_esp_oof_color, 0);
  }
  void add_misc_hitsound(bool misc_hitsound) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_HITSOUND, static_cast<uint8_t>(misc_hitsound), 0);
  }
  void add_misc_hitmarker(bool misc_hitmarker) {
    fbb_.AddElement<uint8_t>(misc::VT_MISC_HITMARKER, static_cast<uint8_t>(misc_hitmarker), 0);
  }
  explicit miscBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<misc> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<misc>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<misc> Createmisc(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool autopeek = false,
    bool duck_assist = false,
    bool slowwalk = false,
    bool bunnyhop = false,
    bool auto_strafe = false,
    bool misc_onshot_capsule = false,
    bool misc_dark_mode = false,
    bool disable_light = false,
    bool penetration_crosshair = false,
    bool force_crosshair = false,
    bool blur = false,
    int32_t world_changer = 0,
    uint32_t grenade_trail_color = 0,
    bool thirdperson = false,
    int32_t thirdperson_amount = 0,
    bool smoke_remove = false,
    bool server_impact = false,
    bool client_impact = false,
    bool bullet_trace = false,
    uint32_t bullet_trace_color = 0,
    bool bullet_trace_enemy = false,
    uint32_t bullet_trace_enemy_color = 0,
    bool grenade_trail = false,
    bool keybind = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> keybind_position = 0,
    bool spectators = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> spectators_position = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> rapid_position = 0,
    bool watermark = false,
    bool misc_viewmodel_changer = false,
    int32_t misc_viewmodel_x = 0,
    int32_t misc_viewmodel_y = 0,
    int32_t misc_viewmodel_z = 0,
    int32_t misc_fov = 0,
    bool misc_remove_scope = false,
    bool misc_norecoil = false,
    bool misc_remove_post_processing = false,
    bool misc_remove_legs = false,
    bool misc_remove_grenade_crosshair = false,
    bool misc_unlock_inventory = false,
    bool misc_remove_bob = false,
    bool misc_buybot = false,
    int32_t misc_buybot_primary = 0,
    int32_t misc_buybot_secondary = 0,
    bool misc_buybot_zeus = false,
    bool misc_buybot_armor = false,
    bool misc_buybot_grenades = false,
    bool misc_grenade_prediction = false,
    bool misc_preserve_killfeed = false,
    bool misc_esp_oof = false,
    uint32_t misc_esp_oof_color = 0,
    bool misc_hitsound = false,
    bool misc_hitmarker = false) {
  miscBuilder builder_(_fbb);
  builder_.add_misc_esp_oof_color(misc_esp_oof_color);
  builder_.add_misc_buybot_secondary(misc_buybot_secondary);
  builder_.add_misc_buybot_primary(misc_buybot_primary);
  builder_.add_misc_fov(misc_fov);
  builder_.add_misc_viewmodel_z(misc_viewmodel_z);
  builder_.add_misc_viewmodel_y(misc_viewmodel_y);
  builder_.add_misc_viewmodel_x(misc_viewmodel_x);
  builder_.add_rapid_position(rapid_position);
  builder_.add_spectators_position(spectators_position);
  builder_.add_keybind_position(keybind_position);
  builder_.add_bullet_trace_enemy_color(bullet_trace_enemy_color);
  builder_.add_bullet_trace_color(bullet_trace_color);
  builder_.add_thirdperson_amount(thirdperson_amount);
  builder_.add_grenade_trail_color(grenade_trail_color);
  builder_.add_world_changer(world_changer);
  builder_.add_misc_hitmarker(misc_hitmarker);
  builder_.add_misc_hitsound(misc_hitsound);
  builder_.add_misc_esp_oof(misc_esp_oof);
  builder_.add_misc_preserve_killfeed(misc_preserve_killfeed);
  builder_.add_misc_grenade_prediction(misc_grenade_prediction);
  builder_.add_misc_buybot_grenades(misc_buybot_grenades);
  builder_.add_misc_buybot_armor(misc_buybot_armor);
  builder_.add_misc_buybot_zeus(misc_buybot_zeus);
  builder_.add_misc_buybot(misc_buybot);
  builder_.add_misc_remove_bob(misc_remove_bob);
  builder_.add_misc_unlock_inventory(misc_unlock_inventory);
  builder_.add_misc_remove_grenade_crosshair(misc_remove_grenade_crosshair);
  builder_.add_misc_remove_legs(misc_remove_legs);
  builder_.add_misc_remove_post_processing(misc_remove_post_processing);
  builder_.add_misc_norecoil(misc_norecoil);
  builder_.add_misc_remove_scope(misc_remove_scope);
  builder_.add_misc_viewmodel_changer(misc_viewmodel_changer);
  builder_.add_watermark(watermark);
  builder_.add_spectators(spectators);
  builder_.add_keybind(keybind);
  builder_.add_grenade_trail(grenade_trail);
  builder_.add_bullet_trace_enemy(bullet_trace_enemy);
  builder_.add_bullet_trace(bullet_trace);
  builder_.add_client_impact(client_impact);
  builder_.add_server_impact(server_impact);
  builder_.add_smoke_remove(smoke_remove);
  builder_.add_thirdperson(thirdperson);
  builder_.add_blur(blur);
  builder_.add_force_crosshair(force_crosshair);
  builder_.add_penetration_crosshair(penetration_crosshair);
  builder_.add_disable_light(disable_light);
  builder_.add_misc_dark_mode(misc_dark_mode);
  builder_.add_misc_onshot_capsule(misc_onshot_capsule);
  builder_.add_auto_strafe(auto_strafe);
  builder_.add_bunnyhop(bunnyhop);
  builder_.add_slowwalk(slowwalk);
  builder_.add_duck_assist(duck_assist);
  builder_.add_autopeek(autopeek);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<misc> CreatemiscDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool autopeek = false,
    bool duck_assist = false,
    bool slowwalk = false,
    bool bunnyhop = false,
    bool auto_strafe = false,
    bool misc_onshot_capsule = false,
    bool misc_dark_mode = false,
    bool disable_light = false,
    bool penetration_crosshair = false,
    bool force_crosshair = false,
    bool blur = false,
    int32_t world_changer = 0,
    uint32_t grenade_trail_color = 0,
    bool thirdperson = false,
    int32_t thirdperson_amount = 0,
    bool smoke_remove = false,
    bool server_impact = false,
    bool client_impact = false,
    bool bullet_trace = false,
    uint32_t bullet_trace_color = 0,
    bool bullet_trace_enemy = false,
    uint32_t bullet_trace_enemy_color = 0,
    bool grenade_trail = false,
    bool keybind = false,
    const std::vector<float> *keybind_position = nullptr,
    bool spectators = false,
    const std::vector<float> *spectators_position = nullptr,
    const std::vector<float> *rapid_position = nullptr,
    bool watermark = false,
    bool misc_viewmodel_changer = false,
    int32_t misc_viewmodel_x = 0,
    int32_t misc_viewmodel_y = 0,
    int32_t misc_viewmodel_z = 0,
    int32_t misc_fov = 0,
    bool misc_remove_scope = false,
    bool misc_norecoil = false,
    bool misc_remove_post_processing = false,
    bool misc_remove_legs = false,
    bool misc_remove_grenade_crosshair = false,
    bool misc_unlock_inventory = false,
    bool misc_remove_bob = false,
    bool misc_buybot = false,
    int32_t misc_buybot_primary = 0,
    int32_t misc_buybot_secondary = 0,
    bool misc_buybot_zeus = false,
    bool misc_buybot_armor = false,
    bool misc_buybot_grenades = false,
    bool misc_grenade_prediction = false,
    bool misc_preserve_killfeed = false,
    bool misc_esp_oof = false,
    uint32_t misc_esp_oof_color = 0,
    bool misc_hitsound = false,
    bool misc_hitmarker = false) {
  auto keybind_position__ = keybind_position ? _fbb.CreateVector<float>(*keybind_position) : 0;
  auto spectators_position__ = spectators_position ? _fbb.CreateVector<float>(*spectators_position) : 0;
  auto rapid_position__ = rapid_position ? _fbb.CreateVector<float>(*rapid_position) : 0;
  return Createmisc(
      _fbb,
      autopeek,
      duck_assist,
      slowwalk,
      bunnyhop,
      auto_strafe,
      misc_onshot_capsule,
      misc_dark_mode,
      disable_light,
      penetration_crosshair,
      force_crosshair,
      blur,
      world_changer,
      grenade_trail_color,
      thirdperson,
      thirdperson_amount,
      smoke_remove,
      server_impact,
      client_impact,
      bullet_trace,
      bullet_trace_color,
      bullet_trace_enemy,
      bullet_trace_enemy_color,
      grenade_trail,
      keybind,
      keybind_position__,
      spectators,
      spectators_position__,
      rapid_position__,
      watermark,
      misc_viewmodel_changer,
      misc_viewmodel_x,
      misc_viewmodel_y,
      misc_viewmodel_z,
      misc_fov,
      misc_remove_scope,
      misc_norecoil,
      misc_remove_post_processing,
      misc_remove_legs,
      misc_remove_grenade_crosshair,
      misc_unlock_inventory,
      misc_remove_bob,
      misc_buybot,
      misc_buybot_primary,
      misc_buybot_secondary,
      misc_buybot_zeus,
      misc_buybot_armor,
      misc_buybot_grenades,
      misc_grenade_prediction,
      misc_preserve_killfeed,
      misc_esp_oof,
      misc_esp_oof_color,
      misc_hitsound,
      misc_hitmarker);
}

::flatbuffers::Offset<misc> Createmisc(::flatbuffers::FlatBufferBuilder &_fbb, const miscT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const miscT &lhs, const miscT &rhs) {
  return
      (lhs.autopeek == rhs.autopeek) &&
      (lhs.duck_assist == rhs.duck_assist) &&
      (lhs.slowwalk == rhs.slowwalk) &&
      (lhs.bunnyhop == rhs.bunnyhop) &&
      (lhs.auto_strafe == rhs.auto_strafe) &&
      (lhs.misc_onshot_capsule == rhs.misc_onshot_capsule) &&
      (lhs.misc_dark_mode == rhs.misc_dark_mode) &&
      (lhs.disable_light == rhs.disable_light) &&
      (lhs.penetration_crosshair == rhs.penetration_crosshair) &&
      (lhs.force_crosshair == rhs.force_crosshair) &&
      (lhs.blur == rhs.blur) &&
      (lhs.world_changer == rhs.world_changer) &&
      (lhs.grenade_trail_color == rhs.grenade_trail_color) &&
      (lhs.thirdperson == rhs.thirdperson) &&
      (lhs.thirdperson_amount == rhs.thirdperson_amount) &&
      (lhs.smoke_remove == rhs.smoke_remove) &&
      (lhs.server_impact == rhs.server_impact) &&
      (lhs.client_impact == rhs.client_impact) &&
      (lhs.bullet_trace == rhs.bullet_trace) &&
      (lhs.bullet_trace_color == rhs.bullet_trace_color) &&
      (lhs.bullet_trace_enemy == rhs.bullet_trace_enemy) &&
      (lhs.bullet_trace_enemy_color == rhs.bullet_trace_enemy_color) &&
      (lhs.grenade_trail == rhs.grenade_trail) &&
      (lhs.keybind == rhs.keybind) &&
      (lhs.keybind_position == rhs.keybind_position) &&
      (lhs.spectators == rhs.spectators) &&
      (lhs.spectators_position == rhs.spectators_position) &&
      (lhs.rapid_position == rhs.rapid_position) &&
      (lhs.watermark == rhs.watermark) &&
      (lhs.misc_viewmodel_changer == rhs.misc_viewmodel_changer) &&
      (lhs.misc_viewmodel_x == rhs.misc_viewmodel_x) &&
      (lhs.misc_viewmodel_y == rhs.misc_viewmodel_y) &&
      (lhs.misc_viewmodel_z == rhs.misc_viewmodel_z) &&
      (lhs.misc_fov == rhs.misc_fov) &&
      (lhs.misc_remove_scope == rhs.misc_remove_scope) &&
      (lhs.misc_norecoil == rhs.misc_norecoil) &&
      (lhs.misc_remove_post_processing == rhs.misc_remove_post_processing) &&
      (lhs.misc_remove_legs == rhs.misc_remove_legs) &&
      (lhs.misc_remove_grenade_crosshair == rhs.misc_remove_grenade_crosshair) &&
      (lhs.misc_unlock_inventory == rhs.misc_unlock_inventory) &&
      (lhs.misc_remove_bob == rhs.misc_remove_bob) &&
      (lhs.misc_buybot == rhs.misc_buybot) &&
      (lhs.misc_buybot_primary == rhs.misc_buybot_primary) &&
      (lhs.misc_buybot_secondary == rhs.misc_buybot_secondary) &&
      (lhs.misc_buybot_zeus == rhs.misc_buybot_zeus) &&
      (lhs.misc_buybot_armor == rhs.misc_buybot_armor) &&
      (lhs.misc_buybot_grenades == rhs.misc_buybot_grenades) &&
      (lhs.misc_grenade_prediction == rhs.misc_grenade_prediction) &&
      (lhs.misc_preserve_killfeed == rhs.misc_preserve_killfeed) &&
      (lhs.misc_esp_oof == rhs.misc_esp_oof) &&
      (lhs.misc_esp_oof_color == rhs.misc_esp_oof_color) &&
      (lhs.misc_hitsound == rhs.misc_hitsound) &&
      (lhs.misc_hitmarker == rhs.misc_hitmarker);
}

inline bool operator!=(const miscT &lhs, const miscT &rhs) {
    return !(lhs == rhs);
}


inline miscT *misc::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<miscT>(new miscT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void misc::UnPackTo(miscT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = autopeek(); _o->autopeek = _e; }
  { auto _e = duck_assist(); _o->duck_assist = _e; }
  { auto _e = slowwalk(); _o->slowwalk = _e; }
  { auto _e = bunnyhop(); _o->bunnyhop = _e; }
  { auto _e = auto_strafe(); _o->auto_strafe = _e; }
  { auto _e = misc_onshot_capsule(); _o->misc_onshot_capsule = _e; }
  { auto _e = misc_dark_mode(); _o->misc_dark_mode = _e; }
  { auto _e = disable_light(); _o->disable_light = _e; }
  { auto _e = penetration_crosshair(); _o->penetration_crosshair = _e; }
  { auto _e = force_crosshair(); _o->force_crosshair = _e; }
  { auto _e = blur(); _o->blur = _e; }
  { auto _e = world_changer(); _o->world_changer = _e; }
  { auto _e = grenade_trail_color(); _o->grenade_trail_color = _e; }
  { auto _e = thirdperson(); _o->thirdperson = _e; }
  { auto _e = thirdperson_amount(); _o->thirdperson_amount = _e; }
  { auto _e = smoke_remove(); _o->smoke_remove = _e; }
  { auto _e = server_impact(); _o->server_impact = _e; }
  { auto _e = client_impact(); _o->client_impact = _e; }
  { auto _e = bullet_trace(); _o->bullet_trace = _e; }
  { auto _e = bullet_trace_color(); _o->bullet_trace_color = _e; }
  { auto _e = bullet_trace_enemy(); _o->bullet_trace_enemy = _e; }
  { auto _e = bullet_trace_enemy_color(); _o->bullet_trace_enemy_color = _e; }
  { auto _e = grenade_trail(); _o->grenade_trail = _e; }
  { auto _e = keybind(); _o->keybind = _e; }
  { auto _e = keybind_position(); if (_e) { _o->keybind_position.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->keybind_position[_i] = _e->Get(_i); } } else { _o->keybind_position.resize(0); } }
  { auto _e = spectators(); _o->spectators = _e; }
  { auto _e = spectators_position(); if (_e) { _o->spectators_position.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->spectators_position[_i] = _e->Get(_i); } } else { _o->spectators_position.resize(0); } }
  { auto _e = rapid_position(); if (_e) { _o->rapid_position.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->rapid_position[_i] = _e->Get(_i); } } else { _o->rapid_position.resize(0); } }
  { auto _e = watermark(); _o->watermark = _e; }
  { auto _e = misc_viewmodel_changer(); _o->misc_viewmodel_changer = _e; }
  { auto _e = misc_viewmodel_x(); _o->misc_viewmodel_x = _e; }
  { auto _e = misc_viewmodel_y(); _o->misc_viewmodel_y = _e; }
  { auto _e = misc_viewmodel_z(); _o->misc_viewmodel_z = _e; }
  { auto _e = misc_fov(); _o->misc_fov = _e; }
  { auto _e = misc_remove_scope(); _o->misc_remove_scope = _e; }
  { auto _e = misc_norecoil(); _o->misc_norecoil = _e; }
  { auto _e = misc_remove_post_processing(); _o->misc_remove_post_processing = _e; }
  { auto _e = misc_remove_legs(); _o->misc_remove_legs = _e; }
  { auto _e = misc_remove_grenade_crosshair(); _o->misc_remove_grenade_crosshair = _e; }
  { auto _e = misc_unlock_inventory(); _o->misc_unlock_inventory = _e; }
  { auto _e = misc_remove_bob(); _o->misc_remove_bob = _e; }
  { auto _e = misc_buybot(); _o->misc_buybot = _e; }
  { auto _e = misc_buybot_primary(); _o->misc_buybot_primary = _e; }
  { auto _e = misc_buybot_secondary(); _o->misc_buybot_secondary = _e; }
  { auto _e = misc_buybot_zeus(); _o->misc_buybot_zeus = _e; }
  { auto _e = misc_buybot_armor(); _o->misc_buybot_armor = _e; }
  { auto _e = misc_buybot_grenades(); _o->misc_buybot_grenades = _e; }
  { auto _e = misc_grenade_prediction(); _o->misc_grenade_prediction = _e; }
  { auto _e = misc_preserve_killfeed(); _o->misc_preserve_killfeed = _e; }
  { auto _e = misc_esp_oof(); _o->misc_esp_oof = _e; }
  { auto _e = misc_esp_oof_color(); _o->misc_esp_oof_color = _e; }
  { auto _e = misc_hitsound(); _o->misc_hitsound = _e; }
  { auto _e = misc_hitmarker(); _o->misc_hitmarker = _e; }
}

inline ::flatbuffers::Offset<misc> misc::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const miscT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createmisc(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<misc> Createmisc(::flatbuffers::FlatBufferBuilder &_fbb, const miscT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const miscT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _autopeek = _o->autopeek;
  auto _duck_assist = _o->duck_assist;
  auto _slowwalk = _o->slowwalk;
  auto _bunnyhop = _o->bunnyhop;
  auto _auto_strafe = _o->auto_strafe;
  auto _misc_onshot_capsule = _o->misc_onshot_capsule;
  auto _misc_dark_mode = _o->misc_dark_mode;
  auto _disable_light = _o->disable_light;
  auto _penetration_crosshair = _o->penetration_crosshair;
  auto _force_crosshair = _o->force_crosshair;
  auto _blur = _o->blur;
  auto _world_changer = _o->world_changer;
  auto _grenade_trail_color = _o->grenade_trail_color;
  auto _thirdperson = _o->thirdperson;
  auto _thirdperson_amount = _o->thirdperson_amount;
  auto _smoke_remove = _o->smoke_remove;
  auto _server_impact = _o->server_impact;
  auto _client_impact = _o->client_impact;
  auto _bullet_trace = _o->bullet_trace;
  auto _bullet_trace_color = _o->bullet_trace_color;
  auto _bullet_trace_enemy = _o->bullet_trace_enemy;
  auto _bullet_trace_enemy_color = _o->bullet_trace_enemy_color;
  auto _grenade_trail = _o->grenade_trail;
  auto _keybind = _o->keybind;
  auto _keybind_position = _o->keybind_position.size() ? _fbb.CreateVector(_o->keybind_position) : 0;
  auto _spectators = _o->spectators;
  auto _spectators_position = _o->spectators_position.size() ? _fbb.CreateVector(_o->spectators_position) : 0;
  auto _rapid_position = _o->rapid_position.size() ? _fbb.CreateVector(_o->rapid_position) : 0;
  auto _watermark = _o->watermark;
  auto _misc_viewmodel_changer = _o->misc_viewmodel_changer;
  auto _misc_viewmodel_x = _o->misc_viewmodel_x;
  auto _misc_viewmodel_y = _o->misc_viewmodel_y;
  auto _misc_viewmodel_z = _o->misc_viewmodel_z;
  auto _misc_fov = _o->misc_fov;
  auto _misc_remove_scope = _o->misc_remove_scope;
  auto _misc_norecoil = _o->misc_norecoil;
  auto _misc_remove_post_processing = _o->misc_remove_post_processing;
  auto _misc_remove_legs = _o->misc_remove_legs;
  auto _misc_remove_grenade_crosshair = _o->misc_remove_grenade_crosshair;
  auto _misc_unlock_inventory = _o->misc_unlock_inventory;
  auto _misc_remove_bob = _o->misc_remove_bob;
  auto _misc_buybot = _o->misc_buybot;
  auto _misc_buybot_primary = _o->misc_buybot_primary;
  auto _misc_buybot_secondary = _o->misc_buybot_secondary;
  auto _misc_buybot_zeus = _o->misc_buybot_zeus;
  auto _misc_buybot_armor = _o->misc_buybot_armor;
  auto _misc_buybot_grenades = _o->misc_buybot_grenades;
  auto _misc_grenade_prediction = _o->misc_grenade_prediction;
  auto _misc_preserve_killfeed = _o->misc_preserve_killfeed;
  auto _misc_esp_oof = _o->misc_esp_oof;
  auto _misc_esp_oof_color = _o->misc_esp_oof_color;
  auto _misc_hitsound = _o->misc_hitsound;
  auto _misc_hitmarker = _o->misc_hitmarker;
  return Createmisc(
      _fbb,
      _autopeek,
      _duck_assist,
      _slowwalk,
      _bunnyhop,
      _auto_strafe,
      _misc_onshot_capsule,
      _misc_dark_mode,
      _disable_light,
      _penetration_crosshair,
      _force_crosshair,
      _blur,
      _world_changer,
      _grenade_trail_color,
      _thirdperson,
      _thirdperson_amount,
      _smoke_remove,
      _server_impact,
      _client_impact,
      _bullet_trace,
      _bullet_trace_color,
      _bullet_trace_enemy,
      _bullet_trace_enemy_color,
      _grenade_trail,
      _keybind,
      _keybind_position,
      _spectators,
      _spectators_position,
      _rapid_position,
      _watermark,
      _misc_viewmodel_changer,
      _misc_viewmodel_x,
      _misc_viewmodel_y,
      _misc_viewmodel_z,
      _misc_fov,
      _misc_remove_scope,
      _misc_norecoil,
      _misc_remove_post_processing,
      _misc_remove_legs,
      _misc_remove_grenade_crosshair,
      _misc_unlock_inventory,
      _misc_remove_bob,
      _misc_buybot,
      _misc_buybot_primary,
      _misc_buybot_secondary,
      _misc_buybot_zeus,
      _misc_buybot_armor,
      _misc_buybot_grenades,
      _misc_grenade_prediction,
      _misc_preserve_killfeed,
      _misc_esp_oof,
      _misc_esp_oof_color,
      _misc_hitsound,
      _misc_hitmarker);
}

inline const ::flatbuffers::TypeTable *miscTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_FLOAT, 1, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_UINT, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 },
    { ::flatbuffers::ET_BOOL, 0, -1 }
  };
  static const char * const names[] = {
    "autopeek",
    "duck_assist",
    "slowwalk",
    "bunnyhop",
    "auto_strafe",
    "misc_onshot_capsule",
    "misc_dark_mode",
    "disable_light",
    "penetration_crosshair",
    "force_crosshair",
    "blur",
    "world_changer",
    "grenade_trail_color",
    "thirdperson",
    "thirdperson_amount",
    "smoke_remove",
    "server_impact",
    "client_impact",
    "bullet_trace",
    "bullet_trace_color",
    "bullet_trace_enemy",
    "bullet_trace_enemy_color",
    "grenade_trail",
    "keybind",
    "keybind_position",
    "spectators",
    "spectators_position",
    "rapid_position",
    "watermark",
    "misc_viewmodel_changer",
    "misc_viewmodel_x",
    "misc_viewmodel_y",
    "misc_viewmodel_z",
    "misc_fov",
    "misc_remove_scope",
    "misc_norecoil",
    "misc_remove_post_processing",
    "misc_remove_legs",
    "misc_remove_grenade_crosshair",
    "misc_unlock_inventory",
    "misc_remove_bob",
    "misc_buybot",
    "misc_buybot_primary",
    "misc_buybot_secondary",
    "misc_buybot_zeus",
    "misc_buybot_armor",
    "misc_buybot_grenades",
    "misc_grenade_prediction",
    "misc_preserve_killfeed",
    "misc_esp_oof",
    "misc_esp_oof_color",
    "misc_hitsound",
    "misc_hitmarker"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 53, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_MISCTABLE_H_
