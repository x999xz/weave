// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REQUESTTABLE_H_
#define FLATBUFFERS_GENERATED_REQUESTTABLE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct request;
struct requestBuilder;
struct requestT;

bool operator==(const requestT &lhs, const requestT &rhs);
bool operator!=(const requestT &lhs, const requestT &rhs);

inline const ::flatbuffers::TypeTable *requestTypeTable();

struct requestT : public ::flatbuffers::NativeTable {
  typedef request TableType;
  std::string data{};
};

struct request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef requestT NativeTableType;
  typedef requestBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return requestTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  ::flatbuffers::String *mutable_data() {
    return GetPointer<::flatbuffers::String *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
  requestT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(requestT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<request> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const requestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct requestBuilder {
  typedef request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(request::VT_DATA, data);
  }
  explicit requestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<request> Createrequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0) {
  requestBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<request> CreaterequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return Createrequest(
      _fbb,
      data__);
}

::flatbuffers::Offset<request> Createrequest(::flatbuffers::FlatBufferBuilder &_fbb, const requestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const requestT &lhs, const requestT &rhs) {
  return
      (lhs.data == rhs.data);
}

inline bool operator!=(const requestT &lhs, const requestT &rhs) {
    return !(lhs == rhs);
}


inline requestT *request::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<requestT>(new requestT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void request::UnPackTo(requestT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) _o->data = _e->str(); }
}

inline ::flatbuffers::Offset<request> request::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const requestT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return Createrequest(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<request> Createrequest(::flatbuffers::FlatBufferBuilder &_fbb, const requestT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const requestT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.empty() ? 0 : _fbb.CreateString(_o->data);
  return Createrequest(
      _fbb,
      _data);
}

inline const ::flatbuffers::TypeTable *requestTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "data"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_REQUESTTABLE_H_
