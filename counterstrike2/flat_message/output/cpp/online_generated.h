// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ONLINE_H_
#define FLATBUFFERS_GENERATED_ONLINE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct OnlineUser;
struct OnlineUserBuilder;
struct OnlineUserT;

struct Online;
struct OnlineBuilder;
struct OnlineT;

bool operator==(const OnlineUserT &lhs, const OnlineUserT &rhs);
bool operator!=(const OnlineUserT &lhs, const OnlineUserT &rhs);
bool operator==(const OnlineT &lhs, const OnlineT &rhs);
bool operator!=(const OnlineT &lhs, const OnlineT &rhs);

inline const ::flatbuffers::TypeTable *OnlineUserTypeTable();

inline const ::flatbuffers::TypeTable *OnlineTypeTable();

struct OnlineUserT : public ::flatbuffers::NativeTable {
  typedef OnlineUser TableType;
  std::string username{};
  std::vector<int8_t> avatar{};
};

struct OnlineUser FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnlineUserT NativeTableType;
  typedef OnlineUserBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OnlineUserTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_AVATAR = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  ::flatbuffers::String *mutable_username() {
    return GetPointer<::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::Vector<int8_t> *avatar() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_AVATAR);
  }
  ::flatbuffers::Vector<int8_t> *mutable_avatar() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_AVATAR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_AVATAR) &&
           verifier.VerifyVector(avatar()) &&
           verifier.EndTable();
  }
  OnlineUserT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OnlineUserT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<OnlineUser> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineUserT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OnlineUserBuilder {
  typedef OnlineUser Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(OnlineUser::VT_USERNAME, username);
  }
  void add_avatar(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar) {
    fbb_.AddOffset(OnlineUser::VT_AVATAR, avatar);
  }
  explicit OnlineUserBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnlineUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnlineUser>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnlineUser> CreateOnlineUser(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar = 0) {
  OnlineUserBuilder builder_(_fbb);
  builder_.add_avatar(avatar);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnlineUser> CreateOnlineUserDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const std::vector<int8_t> *avatar = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto avatar__ = avatar ? _fbb.CreateVector<int8_t>(*avatar) : 0;
  return CreateOnlineUser(
      _fbb,
      username__,
      avatar__);
}

::flatbuffers::Offset<OnlineUser> CreateOnlineUser(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineUserT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct OnlineT : public ::flatbuffers::NativeTable {
  typedef Online TableType;
  std::vector<std::unique_ptr<OnlineUserT>> online{};
  OnlineT() = default;
  OnlineT(const OnlineT &o);
  OnlineT(OnlineT&&) FLATBUFFERS_NOEXCEPT = default;
  OnlineT &operator=(OnlineT o) FLATBUFFERS_NOEXCEPT;
};

struct Online FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnlineT NativeTableType;
  typedef OnlineBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return OnlineTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ONLINE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *online() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *>(VT_ONLINE);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *mutable_online() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *>(VT_ONLINE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ONLINE) &&
           verifier.VerifyVector(online()) &&
           verifier.VerifyVectorOfTables(online()) &&
           verifier.EndTable();
  }
  OnlineT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OnlineT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Online> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OnlineBuilder {
  typedef Online Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_online(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>>> online) {
    fbb_.AddOffset(Online::VT_ONLINE, online);
  }
  explicit OnlineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Online> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Online>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Online> CreateOnline(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>>> online = 0) {
  OnlineBuilder builder_(_fbb);
  builder_.add_online(online);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Online> CreateOnlineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<OnlineUser>> *online = nullptr) {
  auto online__ = online ? _fbb.CreateVector<::flatbuffers::Offset<OnlineUser>>(*online) : 0;
  return CreateOnline(
      _fbb,
      online__);
}

::flatbuffers::Offset<Online> CreateOnline(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const OnlineUserT &lhs, const OnlineUserT &rhs) {
  return
      (lhs.username == rhs.username) &&
      (lhs.avatar == rhs.avatar);
}

inline bool operator!=(const OnlineUserT &lhs, const OnlineUserT &rhs) {
    return !(lhs == rhs);
}


inline OnlineUserT *OnlineUser::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OnlineUserT>(new OnlineUserT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OnlineUser::UnPackTo(OnlineUserT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = username(); if (_e) _o->username = _e->str(); }
  { auto _e = avatar(); if (_e) { _o->avatar.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->avatar.begin()); } }
}

inline ::flatbuffers::Offset<OnlineUser> OnlineUser::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineUserT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOnlineUser(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<OnlineUser> CreateOnlineUser(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineUserT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const OnlineUserT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _username = _o->username.empty() ? 0 : _fbb.CreateString(_o->username);
  auto _avatar = _o->avatar.size() ? _fbb.CreateVector(_o->avatar) : 0;
  return CreateOnlineUser(
      _fbb,
      _username,
      _avatar);
}


inline bool operator==(const OnlineT &lhs, const OnlineT &rhs) {
  return
      (lhs.online.size() == rhs.online.size() && std::equal(lhs.online.cbegin(), lhs.online.cend(), rhs.online.cbegin(), [](std::unique_ptr<OnlineUserT> const &a, std::unique_ptr<OnlineUserT> const &b) { return (a == b) || (a && b && *a == *b); }));
}

inline bool operator!=(const OnlineT &lhs, const OnlineT &rhs) {
    return !(lhs == rhs);
}


inline OnlineT::OnlineT(const OnlineT &o) {
  online.reserve(o.online.size());
  for (const auto &online_ : o.online) { online.emplace_back((online_) ? new OnlineUserT(*online_) : nullptr); }
}

inline OnlineT &OnlineT::operator=(OnlineT o) FLATBUFFERS_NOEXCEPT {
  std::swap(online, o.online);
  return *this;
}

inline OnlineT *Online::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OnlineT>(new OnlineT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Online::UnPackTo(OnlineT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = online(); if (_e) { _o->online.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->online[_i]) { _e->Get(_i)->UnPackTo(_o->online[_i].get(), _resolver); } else { _o->online[_i] = std::unique_ptr<OnlineUserT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->online.resize(0); } }
}

inline ::flatbuffers::Offset<Online> Online::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOnline(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Online> CreateOnline(::flatbuffers::FlatBufferBuilder &_fbb, const OnlineT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const OnlineT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _online = _o->online.size() ? _fbb.CreateVector<::flatbuffers::Offset<OnlineUser>> (_o->online.size(), [](size_t i, _VectorArgs *__va) { return CreateOnlineUser(*__va->__fbb, __va->__o->online[i].get(), __va->__rehasher); }, &_va ) : 0;
  return CreateOnline(
      _fbb,
      _online);
}

inline const ::flatbuffers::TypeTable *OnlineUserTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_CHAR, 1, -1 }
  };
  static const char * const names[] = {
    "username",
    "avatar"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 2, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

inline const ::flatbuffers::TypeTable *OnlineTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_SEQUENCE, 1, 0 }
  };
  static const ::flatbuffers::TypeFunction type_refs[] = {
    OnlineUserTypeTable
  };
  static const char * const names[] = {
    "online"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_ONLINE_H_
