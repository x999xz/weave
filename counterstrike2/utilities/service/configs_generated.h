// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIGS_H_
#define FLATBUFFERS_GENERATED_CONFIGS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Config;
struct ConfigBuilder;

struct Configs;
struct ConfigsBuilder;

struct Config FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConfigBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VALUE = 6,
    VT_SHARE = 8,
    VT_UPDATED = 10,
    VT_CREATED = 12,
    VT_USER = 14,
    VT_OWNER = 16
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::String *share() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHARE);
  }
  uint64_t updated() const {
    return GetField<uint64_t>(VT_UPDATED, 0);
  }
  uint64_t created() const {
    return GetField<uint64_t>(VT_CREATED, 0);
  }
  const ::flatbuffers::String *user() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER);
  }
  const ::flatbuffers::String *owner() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OWNER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_SHARE) &&
           verifier.VerifyString(share()) &&
           VerifyField<uint64_t>(verifier, VT_UPDATED, 8) &&
           VerifyField<uint64_t>(verifier, VT_CREATED, 8) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_OWNER) &&
           verifier.VerifyString(owner()) &&
           verifier.EndTable();
  }
};

struct ConfigBuilder {
  typedef Config Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Config::VT_NAME, name);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Config::VT_VALUE, value);
  }
  void add_share(::flatbuffers::Offset<::flatbuffers::String> share) {
    fbb_.AddOffset(Config::VT_SHARE, share);
  }
  void add_updated(uint64_t updated) {
    fbb_.AddElement<uint64_t>(Config::VT_UPDATED, updated, 0);
  }
  void add_created(uint64_t created) {
    fbb_.AddElement<uint64_t>(Config::VT_CREATED, created, 0);
  }
  void add_user(::flatbuffers::Offset<::flatbuffers::String> user) {
    fbb_.AddOffset(Config::VT_USER, user);
  }
  void add_owner(::flatbuffers::Offset<::flatbuffers::String> owner) {
    fbb_.AddOffset(Config::VT_OWNER, owner);
  }
  explicit ConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Config> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Config>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Config> CreateConfig(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::String> share = 0,
    uint64_t updated = 0,
    uint64_t created = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user = 0,
    ::flatbuffers::Offset<::flatbuffers::String> owner = 0) {
  ConfigBuilder builder_(_fbb);
  builder_.add_created(created);
  builder_.add_updated(updated);
  builder_.add_owner(owner);
  builder_.add_user(user);
  builder_.add_share(share);
  builder_.add_value(value);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Config> CreateConfigDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *value = nullptr,
    const char *share = nullptr,
    uint64_t updated = 0,
    uint64_t created = 0,
    const char *user = nullptr,
    const char *owner = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto share__ = share ? _fbb.CreateString(share) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto owner__ = owner ? _fbb.CreateString(owner) : 0;
  return CreateConfig(
      _fbb,
      name__,
      value__,
      share__,
      updated,
      created,
      user__,
      owner__);
}

struct Configs FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ConfigsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONFIG = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Config>> *config() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Config>> *>(VT_CONFIG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONFIG) &&
           verifier.VerifyVector(config()) &&
           verifier.VerifyVectorOfTables(config()) &&
           verifier.EndTable();
  }
};

struct ConfigsBuilder {
  typedef Configs Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_config(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Config>>> config) {
    fbb_.AddOffset(Configs::VT_CONFIG, config);
  }
  explicit ConfigsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Configs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Configs>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Configs> CreateConfigs(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Config>>> config = 0) {
  ConfigsBuilder builder_(_fbb);
  builder_.add_config(config);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Configs> CreateConfigsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Config>> *config = nullptr) {
  auto config__ = config ? _fbb.CreateVector<::flatbuffers::Offset<Config>>(*config) : 0;
  return CreateConfigs(
      _fbb,
      config__);
}

#endif  // FLATBUFFERS_GENERATED_CONFIGS_H_
