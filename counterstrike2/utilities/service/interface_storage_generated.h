// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERFACESTORAGE_H_
#define FLATBUFFERS_GENERATED_INTERFACESTORAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct InterfaceInformation;
struct InterfaceInformationBuilder;

struct InterfaceStorage;
struct InterfaceStorageBuilder;

struct InterfaceInformation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InterfaceInformationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODULE_ = 4,
    VT_INTERFACES = 6
  };
  uint64_t module_() const {
    return GetField<uint64_t>(VT_MODULE_, 0);
  }
  const ::flatbuffers::Vector<uint64_t> *interfaces() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_INTERFACES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MODULE_, 8) &&
           VerifyOffset(verifier, VT_INTERFACES) &&
           verifier.VerifyVector(interfaces()) &&
           verifier.EndTable();
  }
};

struct InterfaceInformationBuilder {
  typedef InterfaceInformation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_module_(uint64_t module_) {
    fbb_.AddElement<uint64_t>(InterfaceInformation::VT_MODULE_, module_, 0);
  }
  void add_interfaces(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> interfaces) {
    fbb_.AddOffset(InterfaceInformation::VT_INTERFACES, interfaces);
  }
  explicit InterfaceInformationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InterfaceInformation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InterfaceInformation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InterfaceInformation> CreateInterfaceInformation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t module_ = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> interfaces = 0) {
  InterfaceInformationBuilder builder_(_fbb);
  builder_.add_module_(module_);
  builder_.add_interfaces(interfaces);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InterfaceInformation> CreateInterfaceInformationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t module_ = 0,
    const std::vector<uint64_t> *interfaces = nullptr) {
  auto interfaces__ = interfaces ? _fbb.CreateVector<uint64_t>(*interfaces) : 0;
  return CreateInterfaceInformation(
      _fbb,
      module_,
      interfaces__);
}

struct InterfaceStorage FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef InterfaceStorageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STORAGE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<InterfaceInformation>> *storage() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<InterfaceInformation>> *>(VT_STORAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STORAGE) &&
           verifier.VerifyVector(storage()) &&
           verifier.VerifyVectorOfTables(storage()) &&
           verifier.EndTable();
  }
};

struct InterfaceStorageBuilder {
  typedef InterfaceStorage Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_storage(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<InterfaceInformation>>> storage) {
    fbb_.AddOffset(InterfaceStorage::VT_STORAGE, storage);
  }
  explicit InterfaceStorageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<InterfaceStorage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<InterfaceStorage>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<InterfaceStorage> CreateInterfaceStorage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<InterfaceInformation>>> storage = 0) {
  InterfaceStorageBuilder builder_(_fbb);
  builder_.add_storage(storage);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<InterfaceStorage> CreateInterfaceStorageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<InterfaceInformation>> *storage = nullptr) {
  auto storage__ = storage ? _fbb.CreateVector<::flatbuffers::Offset<InterfaceInformation>>(*storage) : 0;
  return CreateInterfaceStorage(
      _fbb,
      storage__);
}

#endif  // FLATBUFFERS_GENERATED_INTERFACESTORAGE_H_
