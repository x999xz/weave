// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONFIG_H_
#define FLATBUFFERS_GENERATED_CONFIG_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct config_request;
struct config_requestBuilder;

struct config_request FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef config_requestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_SHARE = 6,
    VT_VALUE = 8,
    VT_NAME = 10
  };
  const ::flatbuffers::String *token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOKEN);
  }
  const ::flatbuffers::String *share() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHARE);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOKEN) &&
           verifier.VerifyString(token()) &&
           VerifyOffset(verifier, VT_SHARE) &&
           verifier.VerifyString(share()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct config_requestBuilder {
  typedef config_request Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_token(::flatbuffers::Offset<::flatbuffers::String> token) {
    fbb_.AddOffset(config_request::VT_TOKEN, token);
  }
  void add_share(::flatbuffers::Offset<::flatbuffers::String> share) {
    fbb_.AddOffset(config_request::VT_SHARE, share);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(config_request::VT_VALUE, value);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(config_request::VT_NAME, name);
  }
  explicit config_requestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<config_request> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<config_request>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<config_request> Createconfig_request(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> token = 0,
    ::flatbuffers::Offset<::flatbuffers::String> share = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  config_requestBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_value(value);
  builder_.add_share(share);
  builder_.add_token(token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<config_request> Createconfig_requestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *token = nullptr,
    const char *share = nullptr,
    const char *value = nullptr,
    const char *name = nullptr) {
  auto token__ = token ? _fbb.CreateString(token) : 0;
  auto share__ = share ? _fbb.CreateString(share) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Createconfig_request(
      _fbb,
      token__,
      share__,
      value__,
      name__);
}

#endif  // FLATBUFFERS_GENERATED_CONFIG_H_
