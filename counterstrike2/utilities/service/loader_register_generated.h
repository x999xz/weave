// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOADERREGISTER_H_
#define FLATBUFFERS_GENERATED_LOADERREGISTER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct LoaderRegister;
struct LoaderRegisterBuilder;

struct LoaderRegister FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoaderRegisterBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_BUILD = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *build() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUILD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_BUILD) &&
           verifier.VerifyString(build()) &&
           verifier.EndTable();
  }
};

struct LoaderRegisterBuilder {
  typedef LoaderRegister Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(LoaderRegister::VT_USERNAME, username);
  }
  void add_build(::flatbuffers::Offset<::flatbuffers::String> build) {
    fbb_.AddOffset(LoaderRegister::VT_BUILD, build);
  }
  explicit LoaderRegisterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoaderRegister> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoaderRegister>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoaderRegister> CreateLoaderRegister(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> build = 0) {
  LoaderRegisterBuilder builder_(_fbb);
  builder_.add_build(build);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoaderRegister> CreateLoaderRegisterDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *build = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto build__ = build ? _fbb.CreateString(build) : 0;
  return CreateLoaderRegister(
      _fbb,
      username__,
      build__);
}

#endif  // FLATBUFFERS_GENERATED_LOADERREGISTER_H_
