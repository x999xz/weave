// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ONLINE_H_
#define FLATBUFFERS_GENERATED_ONLINE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct OnlineUser;
struct OnlineUserBuilder;

struct Online;
struct OnlineBuilder;

struct OnlineUser FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnlineUserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_AVATAR = 6
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::Vector<int8_t> *avatar() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_AVATAR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_AVATAR) &&
           verifier.VerifyVector(avatar()) &&
           verifier.EndTable();
  }
};

struct OnlineUserBuilder {
  typedef OnlineUser Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(OnlineUser::VT_USERNAME, username);
  }
  void add_avatar(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar) {
    fbb_.AddOffset(OnlineUser::VT_AVATAR, avatar);
  }
  explicit OnlineUserBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnlineUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnlineUser>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnlineUser> CreateOnlineUser(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar = 0) {
  OnlineUserBuilder builder_(_fbb);
  builder_.add_avatar(avatar);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnlineUser> CreateOnlineUserDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const std::vector<int8_t> *avatar = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto avatar__ = avatar ? _fbb.CreateVector<int8_t>(*avatar) : 0;
  return CreateOnlineUser(
      _fbb,
      username__,
      avatar__);
}

struct Online FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnlineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ONLINE = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *online() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>> *>(VT_ONLINE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ONLINE) &&
           verifier.VerifyVector(online()) &&
           verifier.VerifyVectorOfTables(online()) &&
           verifier.EndTable();
  }
};

struct OnlineBuilder {
  typedef Online Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_online(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>>> online) {
    fbb_.AddOffset(Online::VT_ONLINE, online);
  }
  explicit OnlineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Online> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Online>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Online> CreateOnline(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<OnlineUser>>> online = 0) {
  OnlineBuilder builder_(_fbb);
  builder_.add_online(online);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Online> CreateOnlineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<OnlineUser>> *online = nullptr) {
  auto online__ = online ? _fbb.CreateVector<::flatbuffers::Offset<OnlineUser>>(*online) : 0;
  return CreateOnline(
      _fbb,
      online__);
}

#endif  // FLATBUFFERS_GENERATED_ONLINE_H_
