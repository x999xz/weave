// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOADERPATTERN_H_
#define FLATBUFFERS_GENERATED_LOADERPATTERN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Pattern;
struct PatternBuilder;

struct LoaderPattern;
struct LoaderPatternBuilder;

struct Pattern FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PatternBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODULE_ = 4,
    VT_OFFSET = 6
  };
  uint64_t module_() const {
    return GetField<uint64_t>(VT_MODULE_, 0);
  }
  uint64_t offset() const {
    return GetField<uint64_t>(VT_OFFSET, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_MODULE_, 8) &&
           VerifyField<uint64_t>(verifier, VT_OFFSET, 8) &&
           verifier.EndTable();
  }
};

struct PatternBuilder {
  typedef Pattern Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_module_(uint64_t module_) {
    fbb_.AddElement<uint64_t>(Pattern::VT_MODULE_, module_, 0);
  }
  void add_offset(uint64_t offset) {
    fbb_.AddElement<uint64_t>(Pattern::VT_OFFSET, offset, 0);
  }
  explicit PatternBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pattern> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pattern>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pattern> CreatePattern(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t module_ = 0,
    uint64_t offset = 0) {
  PatternBuilder builder_(_fbb);
  builder_.add_offset(offset);
  builder_.add_module_(module_);
  return builder_.Finish();
}

struct LoaderPattern FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LoaderPatternBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATTERN = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Pattern>> *pattern() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Pattern>> *>(VT_PATTERN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATTERN) &&
           verifier.VerifyVector(pattern()) &&
           verifier.VerifyVectorOfTables(pattern()) &&
           verifier.EndTable();
  }
};

struct LoaderPatternBuilder {
  typedef LoaderPattern Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pattern(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Pattern>>> pattern) {
    fbb_.AddOffset(LoaderPattern::VT_PATTERN, pattern);
  }
  explicit LoaderPatternBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LoaderPattern> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LoaderPattern>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LoaderPattern> CreateLoaderPattern(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Pattern>>> pattern = 0) {
  LoaderPatternBuilder builder_(_fbb);
  builder_.add_pattern(pattern);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LoaderPattern> CreateLoaderPatternDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Pattern>> *pattern = nullptr) {
  auto pattern__ = pattern ? _fbb.CreateVector<::flatbuffers::Offset<Pattern>>(*pattern) : 0;
  return CreateLoaderPattern(
      _fbb,
      pattern__);
}

#endif  // FLATBUFFERS_GENERATED_LOADERPATTERN_H_
