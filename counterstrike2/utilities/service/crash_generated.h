// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CRASH_H_
#define FLATBUFFERS_GENERATED_CRASH_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Crash;
struct CrashBuilder;
struct CrashT;

bool operator==(const CrashT &lhs, const CrashT &rhs);
bool operator!=(const CrashT &lhs, const CrashT &rhs);

inline const ::flatbuffers::TypeTable *CrashTypeTable();

struct CrashT : public ::flatbuffers::NativeTable {
  typedef Crash TableType;
  std::string data{};
  int32_t stage = 0;
  int32_t hook = 0;
};

struct Crash FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CrashT NativeTableType;
  typedef CrashBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CrashTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_STAGE = 6,
    VT_HOOK = 8
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  ::flatbuffers::String *mutable_data() {
    return GetPointer<::flatbuffers::String *>(VT_DATA);
  }
  int32_t stage() const {
    return GetField<int32_t>(VT_STAGE, 0);
  }
  bool mutate_stage(int32_t _stage = 0) {
    return SetField<int32_t>(VT_STAGE, _stage, 0);
  }
  int32_t hook() const {
    return GetField<int32_t>(VT_HOOK, 0);
  }
  bool mutate_hook(int32_t _hook = 0) {
    return SetField<int32_t>(VT_HOOK, _hook, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           VerifyField<int32_t>(verifier, VT_STAGE, 4) &&
           VerifyField<int32_t>(verifier, VT_HOOK, 4) &&
           verifier.EndTable();
  }
  CrashT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CrashT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Crash> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CrashT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CrashBuilder {
  typedef Crash Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(Crash::VT_DATA, data);
  }
  void add_stage(int32_t stage) {
    fbb_.AddElement<int32_t>(Crash::VT_STAGE, stage, 0);
  }
  void add_hook(int32_t hook) {
    fbb_.AddElement<int32_t>(Crash::VT_HOOK, hook, 0);
  }
  explicit CrashBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Crash> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Crash>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Crash> CreateCrash(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0,
    int32_t stage = 0,
    int32_t hook = 0) {
  CrashBuilder builder_(_fbb);
  builder_.add_hook(hook);
  builder_.add_stage(stage);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Crash> CreateCrashDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr,
    int32_t stage = 0,
    int32_t hook = 0) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return CreateCrash(
      _fbb,
      data__,
      stage,
      hook);
}

::flatbuffers::Offset<Crash> CreateCrash(::flatbuffers::FlatBufferBuilder &_fbb, const CrashT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const CrashT &lhs, const CrashT &rhs) {
  return
      (lhs.data == rhs.data) &&
      (lhs.stage == rhs.stage) &&
      (lhs.hook == rhs.hook);
}

inline bool operator!=(const CrashT &lhs, const CrashT &rhs) {
    return !(lhs == rhs);
}


inline CrashT *Crash::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CrashT>(new CrashT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Crash::UnPackTo(CrashT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = data(); if (_e) _o->data = _e->str(); }
  { auto _e = stage(); _o->stage = _e; }
  { auto _e = hook(); _o->hook = _e; }
}

inline ::flatbuffers::Offset<Crash> Crash::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CrashT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCrash(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Crash> CreateCrash(::flatbuffers::FlatBufferBuilder &_fbb, const CrashT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CrashT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _data = _o->data.empty() ? 0 : _fbb.CreateString(_o->data);
  auto _stage = _o->stage;
  auto _hook = _o->hook;
  return CreateCrash(
      _fbb,
      _data,
      _stage,
      _hook);
}

inline const ::flatbuffers::TypeTable *CrashTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 },
    { ::flatbuffers::ET_INT, 0, -1 }
  };
  static const char * const names[] = {
    "data",
    "stage",
    "hook"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_CRASH_H_
