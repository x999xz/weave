// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USER_H_
#define FLATBUFFERS_GENERATED_USER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct User;
struct UserBuilder;
struct UserT;

bool operator==(const UserT &lhs, const UserT &rhs);
bool operator!=(const UserT &lhs, const UserT &rhs);

inline const ::flatbuffers::TypeTable *UserTypeTable();

struct UserT : public ::flatbuffers::NativeTable {
  typedef User TableType;
  std::string username{};
  std::string id{};
  std::string prefix{};
  uint64_t sub_time = 0;
  std::vector<int8_t> avatar{};
};

struct User FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserT NativeTableType;
  typedef UserBuilder Builder;
  static const ::flatbuffers::TypeTable *MiniReflectTypeTable() {
    return UserTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_ID = 6,
    VT_PREFIX = 8,
    VT_SUB_TIME = 10,
    VT_AVATAR = 12
  };
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  ::flatbuffers::String *mutable_username() {
    return GetPointer<::flatbuffers::String *>(VT_USERNAME);
  }
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  ::flatbuffers::String *mutable_id() {
    return GetPointer<::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *prefix() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREFIX);
  }
  ::flatbuffers::String *mutable_prefix() {
    return GetPointer<::flatbuffers::String *>(VT_PREFIX);
  }
  uint64_t sub_time() const {
    return GetField<uint64_t>(VT_SUB_TIME, 0);
  }
  bool mutate_sub_time(uint64_t _sub_time = 0) {
    return SetField<uint64_t>(VT_SUB_TIME, _sub_time, 0);
  }
  const ::flatbuffers::Vector<int8_t> *avatar() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_AVATAR);
  }
  ::flatbuffers::Vector<int8_t> *mutable_avatar() {
    return GetPointer<::flatbuffers::Vector<int8_t> *>(VT_AVATAR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_PREFIX) &&
           verifier.VerifyString(prefix()) &&
           VerifyField<uint64_t>(verifier, VT_SUB_TIME, 8) &&
           VerifyOffset(verifier, VT_AVATAR) &&
           verifier.VerifyVector(avatar()) &&
           verifier.EndTable();
  }
  UserT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(UserT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<User> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UserT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct UserBuilder {
  typedef User Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(User::VT_USERNAME, username);
  }
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(User::VT_ID, id);
  }
  void add_prefix(::flatbuffers::Offset<::flatbuffers::String> prefix) {
    fbb_.AddOffset(User::VT_PREFIX, prefix);
  }
  void add_sub_time(uint64_t sub_time) {
    fbb_.AddElement<uint64_t>(User::VT_SUB_TIME, sub_time, 0);
  }
  void add_avatar(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar) {
    fbb_.AddOffset(User::VT_AVATAR, avatar);
  }
  explicit UserBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<User>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<User> CreateUser(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> prefix = 0,
    uint64_t sub_time = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> avatar = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_sub_time(sub_time);
  builder_.add_avatar(avatar);
  builder_.add_prefix(prefix);
  builder_.add_id(id);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<User> CreateUserDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *id = nullptr,
    const char *prefix = nullptr,
    uint64_t sub_time = 0,
    const std::vector<int8_t> *avatar = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto prefix__ = prefix ? _fbb.CreateString(prefix) : 0;
  auto avatar__ = avatar ? _fbb.CreateVector<int8_t>(*avatar) : 0;
  return CreateUser(
      _fbb,
      username__,
      id__,
      prefix__,
      sub_time,
      avatar__);
}

::flatbuffers::Offset<User> CreateUser(::flatbuffers::FlatBufferBuilder &_fbb, const UserT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);


inline bool operator==(const UserT &lhs, const UserT &rhs) {
  return
      (lhs.username == rhs.username) &&
      (lhs.id == rhs.id) &&
      (lhs.prefix == rhs.prefix) &&
      (lhs.sub_time == rhs.sub_time) &&
      (lhs.avatar == rhs.avatar);
}

inline bool operator!=(const UserT &lhs, const UserT &rhs) {
    return !(lhs == rhs);
}


inline UserT *User::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<UserT>(new UserT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void User::UnPackTo(UserT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = username(); if (_e) _o->username = _e->str(); }
  { auto _e = id(); if (_e) _o->id = _e->str(); }
  { auto _e = prefix(); if (_e) _o->prefix = _e->str(); }
  { auto _e = sub_time(); _o->sub_time = _e; }
  { auto _e = avatar(); if (_e) { _o->avatar.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->avatar.begin()); } }
}

inline ::flatbuffers::Offset<User> User::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const UserT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateUser(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<User> CreateUser(::flatbuffers::FlatBufferBuilder &_fbb, const UserT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const UserT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _username = _o->username.empty() ? 0 : _fbb.CreateString(_o->username);
  auto _id = _o->id.empty() ? 0 : _fbb.CreateString(_o->id);
  auto _prefix = _o->prefix.empty() ? 0 : _fbb.CreateString(_o->prefix);
  auto _sub_time = _o->sub_time;
  auto _avatar = _o->avatar.size() ? _fbb.CreateVector(_o->avatar) : 0;
  return CreateUser(
      _fbb,
      _username,
      _id,
      _prefix,
      _sub_time,
      _avatar);
}

inline const ::flatbuffers::TypeTable *UserTypeTable() {
  static const ::flatbuffers::TypeCode type_codes[] = {
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_STRING, 0, -1 },
    { ::flatbuffers::ET_ULONG, 0, -1 },
    { ::flatbuffers::ET_CHAR, 1, -1 }
  };
  static const char * const names[] = {
    "username",
    "id",
    "prefix",
    "sub_time",
    "avatar"
  };
  static const ::flatbuffers::TypeTable tt = {
    ::flatbuffers::ST_TABLE, 5, type_codes, nullptr, nullptr, nullptr, names
  };
  return &tt;
}

#endif  // FLATBUFFERS_GENERATED_USER_H_
